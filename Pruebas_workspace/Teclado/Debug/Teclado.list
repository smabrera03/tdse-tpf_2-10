
Teclado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b0  080044b0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080044b0  080044b0  000054b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b8  080044b8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080044c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08004530  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004530  0000633c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008558  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb5  00000000  00000000  0000e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  000104a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000540  00000000  00000000  00010bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018489  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c041  00000000  00000000  00029591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836e5  00000000  00000000  000355d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  000b8cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000bb354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080043d0 	.word	0x080043d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080043d0 	.word	0x080043d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000160:	f002 ff80 	bl	8003064 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa4a 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f82c 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f896 	bl	800029c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f86a 	bl	8000248 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	//app_init();
  KEYPAD_Init(0, gu8_KeyStatesArr);
 8000174:	490f      	ldr	r1, [pc, #60]	@ (80001b4 <main+0x58>)
 8000176:	2000      	movs	r0, #0
 8000178:	f001 fa52 	bl	8001620 <KEYPAD_Init>

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  //app_update();
	  KEYPAD_Scan(0);
 800017c:	2000      	movs	r0, #0
 800017e:	f001 fbf7 	bl	8001970 <KEYPAD_Scan>
	  HAL_Delay(100);
 8000182:	2064      	movs	r0, #100	@ 0x64
 8000184:	f000 fa9c 	bl	80006c0 <HAL_Delay>

	  if(gu8_KeyStatesArr[0] == KEY_PRESSED){
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <main+0x58>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d1f5      	bne.n	800017c <main+0x20>
		  LOGGER_LOG("Apretaste la tecla 1 \n");
 8000190:	b672      	cpsid	i
 8000192:	4b09      	ldr	r3, [pc, #36]	@ (80001b8 <main+0x5c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a09      	ldr	r2, [pc, #36]	@ (80001bc <main+0x60>)
 8000198:	213f      	movs	r1, #63	@ 0x3f
 800019a:	4618      	mov	r0, r3
 800019c:	f003 f970 	bl	8003480 <sniprintf>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4a07      	ldr	r2, [pc, #28]	@ (80001c0 <main+0x64>)
 80001a4:	6013      	str	r3, [r2, #0]
 80001a6:	4b04      	ldr	r3, [pc, #16]	@ (80001b8 <main+0x5c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4618      	mov	r0, r3
 80001ac:	f002 fd2e 	bl	8002c0c <logger_log_print_>
 80001b0:	b662      	cpsie	i
	  KEYPAD_Scan(0);
 80001b2:	e7e3      	b.n	800017c <main+0x20>
 80001b4:	200000d4 	.word	0x200000d4
 80001b8:	0800445c 	.word	0x0800445c
 80001bc:	080043e8 	.word	0x080043e8
 80001c0:	20000134 	.word	0x20000134

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	@ 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	@ 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f003 f9cb 	bl	800356e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f6:	2300      	movs	r3, #0
 80001f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fd1d 	bl	8000c44 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000210:	f000 f8ee 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ff8a 	bl	8001148 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023a:	f000 f8d9 	bl	80003f0 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	@ 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800024c:	4b11      	ldr	r3, [pc, #68]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 800024e:	4a12      	ldr	r2, [pc, #72]	@ (8000298 <MX_USART2_UART_Init+0x50>)
 8000250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000252:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 8000254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800025a:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000260:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000266:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 800026e:	220c      	movs	r2, #12
 8000270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800027e:	4805      	ldr	r0, [pc, #20]	@ (8000294 <MX_USART2_UART_Init+0x4c>)
 8000280:	f001 f8f0 	bl	8001464 <HAL_UART_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800028a:	f000 f8b1 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000008c 	.word	0x2000008c
 8000298:	40004400 	.word	0x40004400

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b4a      	ldr	r3, [pc, #296]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a49      	ldr	r2, [pc, #292]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b47      	ldr	r3, [pc, #284]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c8:	4b44      	ldr	r3, [pc, #272]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a43      	ldr	r2, [pc, #268]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b41      	ldr	r3, [pc, #260]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0320 	and.w	r3, r3, #32
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b3e      	ldr	r3, [pc, #248]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a3d      	ldr	r2, [pc, #244]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b3b      	ldr	r3, [pc, #236]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b38      	ldr	r3, [pc, #224]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a37      	ldr	r2, [pc, #220]	@ (80003dc <MX_GPIO_Init+0x140>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b35      	ldr	r3, [pc, #212]	@ (80003dc <MX_GPIO_Init+0x140>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|C0_Pin|C1_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000316:	4832      	ldr	r0, [pc, #200]	@ (80003e0 <MX_GPIO_Init+0x144>)
 8000318:	f000 fc7b 	bl	8000c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2180      	movs	r1, #128	@ 0x80
 8000320:	4830      	ldr	r0, [pc, #192]	@ (80003e4 <MX_GPIO_Init+0x148>)
 8000322:	f000 fc76 	bl	8000c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	@ 0x40
 800032a:	482f      	ldr	r0, [pc, #188]	@ (80003e8 <MX_GPIO_Init+0x14c>)
 800032c:	f000 fc71 	bl	8000c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000336:	4b2d      	ldr	r3, [pc, #180]	@ (80003ec <MX_GPIO_Init+0x150>)
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	4827      	ldr	r0, [pc, #156]	@ (80003e4 <MX_GPIO_Init+0x148>)
 8000346:	f000 fac9 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin C0_Pin C1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|C0_Pin|C1_Pin;
 800034a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800034e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000350:	2301      	movs	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	2302      	movs	r3, #2
 800035a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	481f      	ldr	r0, [pc, #124]	@ (80003e0 <MX_GPIO_Init+0x144>)
 8000364:	f000 faba 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R2_Pin|R1_Pin;
 8000368:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	481a      	ldr	r0, [pc, #104]	@ (80003e8 <MX_GPIO_Init+0x14c>)
 800037e:	f000 faad 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : C2_Pin */
  GPIO_InitStruct.Pin = C2_Pin;
 8000382:	2380      	movs	r3, #128	@ 0x80
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2302      	movs	r3, #2
 8000390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C2_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4812      	ldr	r0, [pc, #72]	@ (80003e4 <MX_GPIO_Init+0x148>)
 800039a:	f000 fa9f 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : R0_Pin */
  GPIO_InitStruct.Pin = R0_Pin;
 800039e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003a8:	2302      	movs	r3, #2
 80003aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <MX_GPIO_Init+0x144>)
 80003b4:	f000 fa92 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 80003b8:	2340      	movs	r3, #64	@ 0x40
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <MX_GPIO_Init+0x14c>)
 80003d0:	f000 fa84 	bl	80008dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	10110000 	.word	0x10110000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a15      	ldr	r2, [pc, #84]	@ (80004d0 <HAL_UART_MspInit+0x70>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d123      	bne.n	80004c8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 8000486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004b0:	230c      	movs	r3, #12
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <HAL_UART_MspInit+0x78>)
 80004c4:	f000 fa0a 	bl	80008dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40004400 	.word	0x40004400
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <NMI_Handler+0x4>

080004e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <MemManage_Handler+0x4>

080004f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <UsageFault_Handler+0x4>

08000504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 f8ac 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8000530:	f000 f9cd 	bl	80008ce <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000540:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <_sbrk+0x5c>)
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <_sbrk+0x60>)
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <_sbrk+0x64>)
 8000556:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <_sbrk+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d207      	bcs.n	8000578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000568:	f003 f850 	bl	800360c <__errno>
 800056c:	4603      	mov	r3, r0
 800056e:	220c      	movs	r2, #12
 8000570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	e009      	b.n	800058c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	4a05      	ldr	r2, [pc, #20]	@ (800059c <_sbrk+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20005000 	.word	0x20005000
 8000598:	00000400 	.word	0x00000400
 800059c:	200000e4 	.word	0x200000e4
 80005a0:	20000340 	.word	0x20000340

080005a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b0:	f7ff fff8 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005b6:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005b8:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005cc:	4c09      	ldr	r4, [pc, #36]	@ (80005f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005da:	f003 f81d 	bl	8003618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff fdbd 	bl	800015c <main>
  bx lr
 80005e2:	4770      	bx	lr
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005ec:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 80005f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005f4:	2000033c 	.word	0x2000033c

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <HAL_Init+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <HAL_Init+0x28>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f92b 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	200f      	movs	r0, #15
 8000614:	f000 f808 	bl	8000628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000618:	f7ff fef0 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40022000 	.word	0x40022000

08000628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <HAL_InitTick+0x54>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_InitTick+0x58>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f935 	bl	80008b6 <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e00e      	b.n	8000674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d80a      	bhi.n	8000672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f90b 	bl	800087e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000668:	4a06      	ldr	r2, [pc, #24]	@ (8000684 <HAL_InitTick+0x5c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <HAL_IncTick+0x1c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <HAL_IncTick+0x20>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a03      	ldr	r2, [pc, #12]	@ (80006a8 <HAL_IncTick+0x20>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	20000008 	.word	0x20000008
 80006a8:	200000e8 	.word	0x200000e8

080006ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b02      	ldr	r3, [pc, #8]	@ (80006bc <HAL_GetTick+0x10>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	200000e8 	.word	0x200000e8

080006c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f7ff fff0 	bl	80006ac <HAL_GetTick>
 80006cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d8:	d005      	beq.n	80006e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_Delay+0x44>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e6:	bf00      	nop
 80006e8:	f7ff ffe0 	bl	80006ac <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d8f7      	bhi.n	80006e8 <HAL_Delay+0x28>
  {
  }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000008 	.word	0x20000008

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	@ (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	@ (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	@ (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	@ 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff90 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff49 	bl	8000708 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff5e 	bl	8000750 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff90 	bl	80007c0 <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5f 	bl	800076c <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffb0 	bl	8000824 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008d2:	f002 f979 	bl	8002bc8 <HAL_SYSTICK_Callback>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08b      	sub	sp, #44	@ 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ee:	e169      	b.n	8000bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f0:	2201      	movs	r2, #1
 80008f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 8158 	bne.w	8000bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	4a9a      	ldr	r2, [pc, #616]	@ (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d05e      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000918:	4a98      	ldr	r2, [pc, #608]	@ (8000b7c <HAL_GPIO_Init+0x2a0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d875      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800091e:	4a98      	ldr	r2, [pc, #608]	@ (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d058      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000924:	4a96      	ldr	r2, [pc, #600]	@ (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d86f      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800092a:	4a96      	ldr	r2, [pc, #600]	@ (8000b84 <HAL_GPIO_Init+0x2a8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d052      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000930:	4a94      	ldr	r2, [pc, #592]	@ (8000b84 <HAL_GPIO_Init+0x2a8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d869      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000936:	4a94      	ldr	r2, [pc, #592]	@ (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d04c      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 800093c:	4a92      	ldr	r2, [pc, #584]	@ (8000b88 <HAL_GPIO_Init+0x2ac>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d863      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000942:	4a92      	ldr	r2, [pc, #584]	@ (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d046      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000948:	4a90      	ldr	r2, [pc, #576]	@ (8000b8c <HAL_GPIO_Init+0x2b0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d85d      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800094e:	2b12      	cmp	r3, #18
 8000950:	d82a      	bhi.n	80009a8 <HAL_GPIO_Init+0xcc>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d859      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000956:	a201      	add	r2, pc, #4	@ (adr r2, 800095c <HAL_GPIO_Init+0x80>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	080009d7 	.word	0x080009d7
 8000960:	080009b1 	.word	0x080009b1
 8000964:	080009c3 	.word	0x080009c3
 8000968:	08000a05 	.word	0x08000a05
 800096c:	08000a0b 	.word	0x08000a0b
 8000970:	08000a0b 	.word	0x08000a0b
 8000974:	08000a0b 	.word	0x08000a0b
 8000978:	08000a0b 	.word	0x08000a0b
 800097c:	08000a0b 	.word	0x08000a0b
 8000980:	08000a0b 	.word	0x08000a0b
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000a0b 	.word	0x08000a0b
 800098c:	08000a0b 	.word	0x08000a0b
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	08000a0b 	.word	0x08000a0b
 8000998:	08000a0b 	.word	0x08000a0b
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	4a79      	ldr	r2, [pc, #484]	@ (8000b90 <HAL_GPIO_Init+0x2b4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d013      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ae:	e02c      	b.n	8000a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e029      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	3304      	adds	r3, #4
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e024      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	3308      	adds	r3, #8
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e01f      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	330c      	adds	r3, #12
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e01a      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009de:	2304      	movs	r3, #4
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e013      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	611a      	str	r2, [r3, #16]
          break;
 80009f6:	e009      	b.n	8000a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f8:	2308      	movs	r3, #8
 80009fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	615a      	str	r2, [r3, #20]
          break;
 8000a02:	e003      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          break;
 8000a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2bff      	cmp	r3, #255	@ 0xff
 8000a10:	d801      	bhi.n	8000a16 <HAL_GPIO_Init+0x13a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	e001      	b.n	8000a1a <HAL_GPIO_Init+0x13e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2bff      	cmp	r3, #255	@ 0xff
 8000a20:	d802      	bhi.n	8000a28 <HAL_GPIO_Init+0x14c>
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x152>
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	3b08      	subs	r3, #8
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	210f      	movs	r1, #15
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	401a      	ands	r2, r3
 8000a40:	6a39      	ldr	r1, [r7, #32]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80b1 	beq.w	8000bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a4c      	ldr	r2, [pc, #304]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b4a      	ldr	r3, [pc, #296]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a74:	4a48      	ldr	r2, [pc, #288]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a40      	ldr	r2, [pc, #256]	@ (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1ec>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba0 <HAL_GPIO_Init+0x2c4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e8>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ba4 <HAL_GPIO_Init+0x2c8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ba8 <HAL_GPIO_Init+0x2cc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1e0>
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ada:	492f      	ldr	r1, [pc, #188]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af4:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	492c      	ldr	r1, [pc, #176]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	608b      	str	r3, [r1, #8]
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4928      	ldr	r1, [pc, #160]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d006      	beq.n	8000b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	4922      	ldr	r1, [pc, #136]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60cb      	str	r3, [r1, #12]
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2a:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	491e      	ldr	r1, [pc, #120]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	4918      	ldr	r1, [pc, #96]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4914      	ldr	r1, [pc, #80]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d021      	beq.n	8000bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	490e      	ldr	r1, [pc, #56]	@ (8000bac <HAL_GPIO_Init+0x2d0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
 8000b78:	e021      	b.n	8000bbe <HAL_GPIO_Init+0x2e2>
 8000b7a:	bf00      	nop
 8000b7c:	10320000 	.word	0x10320000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10220000 	.word	0x10220000
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	10120000 	.word	0x10120000
 8000b90:	10110000 	.word	0x10110000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40011400 	.word	0x40011400
 8000bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_GPIO_Init+0x304>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	4909      	ldr	r1, [pc, #36]	@ (8000be0 <HAL_GPIO_Init+0x304>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bca:	fa22 f303 	lsr.w	r3, r2, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f47f ae8e 	bne.w	80008f0 <HAL_GPIO_Init+0x14>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	372c      	adds	r7, #44	@ 0x2c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40010400 	.word	0x40010400

08000be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e001      	b.n	8000c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	807b      	strh	r3, [r7, #2]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c22:	787b      	ldrb	r3, [r7, #1]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c28:	887a      	ldrh	r2, [r7, #2]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c2e:	e003      	b.n	8000c38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	041a      	lsls	r2, r3, #16
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e272      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8087 	beq.w	8000d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c64:	4b92      	ldr	r3, [pc, #584]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d00c      	beq.n	8000c8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c70:	4b8f      	ldr	r3, [pc, #572]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 030c 	and.w	r3, r3, #12
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d112      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x5e>
 8000c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c88:	d10b      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8a:	4b89      	ldr	r3, [pc, #548]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d06c      	beq.n	8000d70 <HAL_RCC_OscConfig+0x12c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d168      	bne.n	8000d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e24c      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000caa:	d106      	bne.n	8000cba <HAL_RCC_OscConfig+0x76>
 8000cac:	4b80      	ldr	r3, [pc, #512]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a7f      	ldr	r2, [pc, #508]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e02e      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x98>
 8000cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b78      	ldr	r3, [pc, #480]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a77      	ldr	r2, [pc, #476]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e01d      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0xbc>
 8000ce6:	4b72      	ldr	r3, [pc, #456]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a71      	ldr	r2, [pc, #452]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e00b      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000d00:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a6a      	ldr	r2, [pc, #424]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b68      	ldr	r3, [pc, #416]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a67      	ldr	r2, [pc, #412]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d20:	f7ff fcc4 	bl	80006ac <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fcc0 	bl	80006ac <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b64      	cmp	r3, #100	@ 0x64
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e200      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0xe4>
 8000d46:	e014      	b.n	8000d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fcb0 	bl	80006ac <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fcac 	bl	80006ac <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	@ 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1ec      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d62:	4b53      	ldr	r3, [pc, #332]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f0      	bne.n	8000d50 <HAL_RCC_OscConfig+0x10c>
 8000d6e:	e000      	b.n	8000d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d063      	beq.n	8000e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00b      	beq.n	8000da2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d8a:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d11c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x18c>
 8000d96:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	4b43      	ldr	r3, [pc, #268]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <HAL_RCC_OscConfig+0x176>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e1c0      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dba:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	4939      	ldr	r1, [pc, #228]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	e03a      	b.n	8000e46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d020      	beq.n	8000e1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd8:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <HAL_RCC_OscConfig+0x270>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc65 	bl	80006ac <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de6:	f7ff fc61 	bl	80006ac <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e1a1      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f0      	beq.n	8000de6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e04:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4927      	ldr	r1, [pc, #156]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e015      	b.n	8000e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1a:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc44 	bl	80006ac <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e28:	f7ff fc40 	bl	80006ac <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e180      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f0      	bne.n	8000e28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d03a      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d019      	beq.n	8000e8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_RCC_OscConfig+0x274>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e60:	f7ff fc24 	bl	80006ac <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc20 	bl	80006ac <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e160      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 face 	bl	8001428 <RCC_Delay>
 8000e8c:	e01c      	b.n	8000ec8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_RCC_OscConfig+0x274>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e94:	f7ff fc0a 	bl	80006ac <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9a:	e00f      	b.n	8000ebc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc06 	bl	80006ac <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d908      	bls.n	8000ebc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e146      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	42420000 	.word	0x42420000
 8000eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebc:	4b92      	ldr	r3, [pc, #584]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e9      	bne.n	8000e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a6 	beq.w	8001022 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b8b      	ldr	r3, [pc, #556]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10d      	bne.n	8000f02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b88      	ldr	r3, [pc, #544]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a87      	ldr	r2, [pc, #540]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b85      	ldr	r3, [pc, #532]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	4b82      	ldr	r3, [pc, #520]	@ (800110c <HAL_RCC_OscConfig+0x4c8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800110c <HAL_RCC_OscConfig+0x4c8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7e      	ldr	r2, [pc, #504]	@ (800110c <HAL_RCC_OscConfig+0x4c8>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fbc7 	bl	80006ac <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff fbc3 	bl	80006ac <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	@ 0x64
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e103      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	4b75      	ldr	r3, [pc, #468]	@ (800110c <HAL_RCC_OscConfig+0x4c8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x312>
 8000f48:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6213      	str	r3, [r2, #32]
 8000f54:	e02d      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x334>
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a69      	ldr	r2, [pc, #420]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	4b67      	ldr	r3, [pc, #412]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a66      	ldr	r2, [pc, #408]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	e01c      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d10c      	bne.n	8000f9a <HAL_RCC_OscConfig+0x356>
 8000f80:	4b61      	ldr	r3, [pc, #388]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a60      	ldr	r2, [pc, #384]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a5d      	ldr	r2, [pc, #372]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6213      	str	r3, [r2, #32]
 8000f98:	e00b      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	4b58      	ldr	r3, [pc, #352]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a57      	ldr	r2, [pc, #348]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d015      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fb77 	bl	80006ac <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fb73 	bl	80006ac <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0b1      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0ee      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x37e>
 8000fe4:	e014      	b.n	8001010 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb61 	bl	80006ac <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fb5d 	bl	80006ac <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e09b      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001004:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1ee      	bne.n	8000fee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d105      	bne.n	8001022 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001016:	4b3c      	ldr	r3, [pc, #240]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a3b      	ldr	r2, [pc, #236]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8087 	beq.w	800113a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800102c:	4b36      	ldr	r3, [pc, #216]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d061      	beq.n	80010fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d146      	bne.n	80010ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001040:	4b33      	ldr	r3, [pc, #204]	@ (8001110 <HAL_RCC_OscConfig+0x4cc>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fb31 	bl	80006ac <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fb2d 	bl	80006ac <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e06d      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001060:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001074:	d108      	bne.n	8001088 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	4921      	ldr	r1, [pc, #132]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a19      	ldr	r1, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	430b      	orrs	r3, r1
 800109a:	491b      	ldr	r1, [pc, #108]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_RCC_OscConfig+0x4cc>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb01 	bl	80006ac <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ae:	f7ff fafd 	bl	80006ac <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e03d      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x46a>
 80010cc:	e035      	b.n	800113a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_RCC_OscConfig+0x4cc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff faea 	bl	80006ac <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010dc:	f7ff fae6 	bl	80006ac <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e026      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x498>
 80010fa:	e01e      	b.n	800113a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d107      	bne.n	8001114 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e019      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
 8001108:	40021000 	.word	0x40021000
 800110c:	40007000 	.word	0x40007000
 8001110:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_RCC_OscConfig+0x500>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	429a      	cmp	r2, r3
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001132:	429a      	cmp	r2, r3
 8001134:	d001      	beq.n	800113a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0d0      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800115c:	4b6a      	ldr	r3, [pc, #424]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d910      	bls.n	800118c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116a:	4b67      	ldr	r3, [pc, #412]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 0207 	bic.w	r2, r3, #7
 8001172:	4965      	ldr	r1, [pc, #404]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b63      	ldr	r3, [pc, #396]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0b8      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a4:	4b59      	ldr	r3, [pc, #356]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a58      	ldr	r2, [pc, #352]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011bc:	4b53      	ldr	r3, [pc, #332]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a52      	ldr	r2, [pc, #328]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c8:	4b50      	ldr	r3, [pc, #320]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	494d      	ldr	r1, [pc, #308]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d040      	beq.n	8001268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b47      	ldr	r3, [pc, #284]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d115      	bne.n	8001226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e07f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001206:	4b41      	ldr	r3, [pc, #260]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e073      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06b      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f023 0203 	bic.w	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4936      	ldr	r1, [pc, #216]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001238:	f7ff fa38 	bl	80006ac <HAL_GetTick>
 800123c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	e00a      	b.n	8001256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001240:	f7ff fa34 	bl	80006ac <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e053      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 020c 	and.w	r2, r3, #12
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	429a      	cmp	r2, r3
 8001266:	d1eb      	bne.n	8001240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d210      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4922      	ldr	r1, [pc, #136]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e032      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4916      	ldr	r1, [pc, #88]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	490e      	ldr	r1, [pc, #56]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d6:	f000 f821 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	490a      	ldr	r1, [pc, #40]	@ (8001310 <HAL_RCC_ClockConfig+0x1c8>)
 80012e8:	5ccb      	ldrb	r3, [r1, r3]
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_RCC_ClockConfig+0x1cc>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_RCC_ClockConfig+0x1d0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f996 	bl	8000628 <HAL_InitTick>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000
 800130c:	40021000 	.word	0x40021000
 8001310:	08004400 	.word	0x08004400
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d002      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x30>
 8001346:	2b08      	cmp	r3, #8
 8001348:	d003      	beq.n	8001352 <HAL_RCC_GetSysClockFreq+0x36>
 800134a:	e027      	b.n	800139c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800134e:	613b      	str	r3, [r7, #16]
      break;
 8001350:	e027      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d010      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	0c5b      	lsrs	r3, r3, #17
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800137e:	fb03 f202 	mul.w	r2, r3, r2
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e004      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a0c      	ldr	r2, [pc, #48]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	613b      	str	r3, [r7, #16]
      break;
 800139a:	e002      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800139e:	613b      	str	r3, [r7, #16]
      break;
 80013a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013a2:	693b      	ldr	r3, [r7, #16]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	007a1200 	.word	0x007a1200
 80013b8:	08004418 	.word	0x08004418
 80013bc:	08004428 	.word	0x08004428
 80013c0:	003d0900 	.word	0x003d0900

080013c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c8:	4b02      	ldr	r3, [pc, #8]	@ (80013d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000000 	.word	0x20000000

080013d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013dc:	f7ff fff2 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	4903      	ldr	r1, [pc, #12]	@ (80013fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ee:	5ccb      	ldrb	r3, [r1, r3]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	08004410 	.word	0x08004410

08001400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001404:	f7ff ffde 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
 8001408:	4602      	mov	r2, r0
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	0adb      	lsrs	r3, r3, #11
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	4903      	ldr	r1, [pc, #12]	@ (8001424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	08004410 	.word	0x08004410

08001428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <RCC_Delay+0x34>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <RCC_Delay+0x38>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0a5b      	lsrs	r3, r3, #9
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001444:	bf00      	nop
  }
  while (Delay --);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	60fa      	str	r2, [r7, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f9      	bne.n	8001444 <RCC_Delay+0x1c>
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000000 	.word	0x20000000
 8001460:	10624dd3 	.word	0x10624dd3

08001464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e042      	b.n	80014fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7fe ffe8 	bl	8000460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2224      	movs	r2, #36	@ 0x24
 8001494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f82b 	bl	8001504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800153e:	f023 030c 	bic.w	r3, r3, #12
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	430b      	orrs	r3, r1
 800154a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a2c      	ldr	r2, [pc, #176]	@ (8001618 <UART_SetConfig+0x114>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d103      	bne.n	8001574 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800156c:	f7ff ff48 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	e002      	b.n	800157a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001574:	f7ff ff30 	bl	80013d8 <HAL_RCC_GetPCLK1Freq>
 8001578:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009a      	lsls	r2, r3, #2
 8001584:	441a      	add	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	4a22      	ldr	r2, [pc, #136]	@ (800161c <UART_SetConfig+0x118>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	0119      	lsls	r1, r3, #4
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	009a      	lsls	r2, r3, #2
 80015a4:	441a      	add	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <UART_SetConfig+0x118>)
 80015b2:	fba3 0302 	umull	r0, r3, r3, r2
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2064      	movs	r0, #100	@ 0x64
 80015ba:	fb00 f303 	mul.w	r3, r0, r3
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	3332      	adds	r3, #50	@ 0x32
 80015c4:	4a15      	ldr	r2, [pc, #84]	@ (800161c <UART_SetConfig+0x118>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015d0:	4419      	add	r1, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009a      	lsls	r2, r3, #2
 80015dc:	441a      	add	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <UART_SetConfig+0x118>)
 80015ea:	fba3 0302 	umull	r0, r3, r3, r2
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2064      	movs	r0, #100	@ 0x64
 80015f2:	fb00 f303 	mul.w	r3, r0, r3
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	3332      	adds	r3, #50	@ 0x32
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <UART_SetConfig+0x118>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	f003 020f 	and.w	r2, r3, #15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	440a      	add	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013800 	.word	0x40013800
 800161c:	51eb851f 	.word	0x51eb851f

08001620 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b092      	sub	sp, #72	@ 0x48
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]

	if(au8_KeyStates != NULL)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8189 	beq.w	800195a <KEYPAD_Init+0x33a>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4997      	ldr	r1, [pc, #604]	@ (80018a8 <KEYPAD_Init+0x288>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001658:	e0ac      	b.n	80017b4 <KEYPAD_Init+0x194>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001660:	4892      	ldr	r0, [pc, #584]	@ (80018ac <KEYPAD_Init+0x28c>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001670:	4a8f      	ldr	r2, [pc, #572]	@ (80018b0 <KEYPAD_Init+0x290>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10c      	bne.n	8001690 <KEYPAD_Init+0x70>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b8f      	ldr	r3, [pc, #572]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a8e      	ldr	r2, [pc, #568]	@ (80018b4 <KEYPAD_Init+0x294>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b8c      	ldr	r3, [pc, #560]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
 800168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168e:	e06a      	b.n	8001766 <KEYPAD_Init+0x146>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8001690:	88fa      	ldrh	r2, [r7, #6]
 8001692:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001696:	4885      	ldr	r0, [pc, #532]	@ (80018ac <KEYPAD_Init+0x28c>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80016a6:	4a84      	ldr	r2, [pc, #528]	@ (80018b8 <KEYPAD_Init+0x298>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d10c      	bne.n	80016c6 <KEYPAD_Init+0xa6>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b81      	ldr	r3, [pc, #516]	@ (80018b4 <KEYPAD_Init+0x294>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a80      	ldr	r2, [pc, #512]	@ (80018b4 <KEYPAD_Init+0x294>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b7e      	ldr	r3, [pc, #504]	@ (80018b4 <KEYPAD_Init+0x294>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c4:	e04f      	b.n	8001766 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 80016c6:	88fa      	ldrh	r2, [r7, #6]
 80016c8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80016cc:	4877      	ldr	r0, [pc, #476]	@ (80018ac <KEYPAD_Init+0x28c>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80016dc:	4a77      	ldr	r2, [pc, #476]	@ (80018bc <KEYPAD_Init+0x29c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10c      	bne.n	80016fc <KEYPAD_Init+0xdc>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b74      	ldr	r3, [pc, #464]	@ (80018b4 <KEYPAD_Init+0x294>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a73      	ldr	r2, [pc, #460]	@ (80018b4 <KEYPAD_Init+0x294>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b71      	ldr	r3, [pc, #452]	@ (80018b4 <KEYPAD_Init+0x294>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fa:	e034      	b.n	8001766 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001702:	486a      	ldr	r0, [pc, #424]	@ (80018ac <KEYPAD_Init+0x28c>)
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001712:	4a6b      	ldr	r2, [pc, #428]	@ (80018c0 <KEYPAD_Init+0x2a0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d10c      	bne.n	8001732 <KEYPAD_Init+0x112>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	4b66      	ldr	r3, [pc, #408]	@ (80018b4 <KEYPAD_Init+0x294>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a65      	ldr	r2, [pc, #404]	@ (80018b4 <KEYPAD_Init+0x294>)
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b63      	ldr	r3, [pc, #396]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	e019      	b.n	8001766 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001738:	485c      	ldr	r0, [pc, #368]	@ (80018ac <KEYPAD_Init+0x28c>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001748:	4a5e      	ldr	r2, [pc, #376]	@ (80018c4 <KEYPAD_Init+0x2a4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10b      	bne.n	8001766 <KEYPAD_Init+0x146>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800174e:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a58      	ldr	r2, [pc, #352]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b56      	ldr	r3, [pc, #344]	@ (80018b4 <KEYPAD_Init+0x294>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	6a3b      	ldr	r3, [r7, #32]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 8001766:	88fa      	ldrh	r2, [r7, #6]
 8001768:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800176c:	484f      	ldr	r0, [pc, #316]	@ (80018ac <KEYPAD_Init+0x28c>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001784:	2302      	movs	r3, #2
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800178e:	4847      	ldr	r0, [pc, #284]	@ (80018ac <KEYPAD_Init+0x28c>)
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800179e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff f899 	bl	80008dc <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80017aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017ae:	3301      	adds	r3, #1
 80017b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80017b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	f67f af4e 	bls.w	800165a <KEYPAD_Init+0x3a>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80017c4:	e0c3      	b.n	800194e <KEYPAD_Init+0x32e>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80017cc:	4837      	ldr	r0, [pc, #220]	@ (80018ac <KEYPAD_Init+0x28c>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	3306      	adds	r3, #6
 80017da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80017de:	4a34      	ldr	r2, [pc, #208]	@ (80018b0 <KEYPAD_Init+0x290>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d10c      	bne.n	80017fe <KEYPAD_Init+0x1de>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <KEYPAD_Init+0x294>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a32      	ldr	r2, [pc, #200]	@ (80018b4 <KEYPAD_Init+0x294>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <KEYPAD_Init+0x294>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	e07f      	b.n	80018fe <KEYPAD_Init+0x2de>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 80017fe:	88fa      	ldrh	r2, [r7, #6]
 8001800:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001804:	4829      	ldr	r0, [pc, #164]	@ (80018ac <KEYPAD_Init+0x28c>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3306      	adds	r3, #6
 8001812:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001816:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <KEYPAD_Init+0x298>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d10c      	bne.n	8001836 <KEYPAD_Init+0x216>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <KEYPAD_Init+0x294>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a24      	ldr	r2, [pc, #144]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <KEYPAD_Init+0x294>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	e063      	b.n	80018fe <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 8001836:	88fa      	ldrh	r2, [r7, #6]
 8001838:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800183c:	481b      	ldr	r0, [pc, #108]	@ (80018ac <KEYPAD_Init+0x28c>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3306      	adds	r3, #6
 800184a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800184e:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <KEYPAD_Init+0x29c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d10c      	bne.n	800186e <KEYPAD_Init+0x24e>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a16      	ldr	r2, [pc, #88]	@ (80018b4 <KEYPAD_Init+0x294>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	e047      	b.n	80018fe <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001874:	480d      	ldr	r0, [pc, #52]	@ (80018ac <KEYPAD_Init+0x28c>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3306      	adds	r3, #6
 8001882:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001886:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <KEYPAD_Init+0x2a0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d11d      	bne.n	80018c8 <KEYPAD_Init+0x2a8>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <KEYPAD_Init+0x294>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <KEYPAD_Init+0x294>)
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <KEYPAD_Init+0x294>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	e02b      	b.n	80018fe <KEYPAD_Init+0x2de>
 80018a6:	bf00      	nop
 80018a8:	200000ec 	.word	0x200000ec
 80018ac:	0800442c 	.word	0x0800442c
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010c00 	.word	0x40010c00
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40011400 	.word	0x40011400
 80018c4:	40011800 	.word	0x40011800
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 80018c8:	88fa      	ldrh	r2, [r7, #6]
 80018ca:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80018ce:	4825      	ldr	r0, [pc, #148]	@ (8001964 <KEYPAD_Init+0x344>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3306      	adds	r3, #6
 80018dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80018e0:	4a21      	ldr	r2, [pc, #132]	@ (8001968 <KEYPAD_Init+0x348>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10b      	bne.n	80018fe <KEYPAD_Init+0x2de>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <KEYPAD_Init+0x34c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a20      	ldr	r2, [pc, #128]	@ (800196c <KEYPAD_Init+0x34c>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <KEYPAD_Init+0x34c>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001904:	4817      	ldr	r0, [pc, #92]	@ (8001964 <KEYPAD_Init+0x344>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3314      	adds	r3, #20
 8001912:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800191c:	2301      	movs	r3, #1
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001926:	480f      	ldr	r0, [pc, #60]	@ (8001964 <KEYPAD_Init+0x344>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3306      	adds	r3, #6
 8001934:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001938:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe ffcc 	bl	80008dc <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 8001944:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001948:	3301      	adds	r3, #1
 800194a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800194e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001952:	2b03      	cmp	r3, #3
 8001954:	f67f af37 	bls.w	80017c6 <KEYPAD_Init+0x1a6>
 8001958:	e000      	b.n	800195c <KEYPAD_Init+0x33c>
		return;
 800195a:	bf00      	nop
	}
}
 800195c:	3748      	adds	r7, #72	@ 0x48
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	0800442c 	.word	0x0800442c
 8001968:	40011800 	.word	0x40011800
 800196c:	40021000 	.word	0x40021000

08001970 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e01c      	b.n	80019c2 <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	7bf9      	ldrb	r1, [r7, #15]
 800198c:	48a7      	ldr	r0, [pc, #668]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3306      	adds	r3, #6
 800199a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800199e:	88fa      	ldrh	r2, [r7, #6]
 80019a0:	7bf9      	ldrb	r1, [r7, #15]
 80019a2:	4ca2      	ldr	r4, [pc, #648]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3314      	adds	r3, #20
 80019b0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f92b 	bl	8000c12 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d9df      	bls.n	8001988 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e022      	b.n	8001a14 <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 80019ce:	88fa      	ldrh	r2, [r7, #6]
 80019d0:	7bf9      	ldrb	r1, [r7, #15]
 80019d2:	4896      	ldr	r0, [pc, #600]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	7bf9      	ldrb	r1, [r7, #15]
 80019e6:	4c91      	ldr	r4, [pc, #580]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3308      	adds	r3, #8
 80019f4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80019f8:	7bfc      	ldrb	r4, [r7, #15]
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8f2 	bl	8000be4 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	f104 0310 	add.w	r3, r4, #16
 8001a08:	443b      	add	r3, r7
 8001a0a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d9d9      	bls.n	80019ce <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 8001a1a:	7a3a      	ldrb	r2, [r7, #8]
 8001a1c:	7a7b      	ldrb	r3, [r7, #9]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	7abb      	ldrb	r3, [r7, #10]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f001 808d 	beq.w	8002b4e <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8200 	beq.w	8001e3c <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	497b      	ldr	r1, [pc, #492]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	440b      	add	r3, r1
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	4976      	ldr	r1, [pc, #472]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3328      	adds	r3, #40	@ 0x28
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8d5 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001a68:	88fa      	ldrh	r2, [r7, #6]
 8001a6a:	4970      	ldr	r1, [pc, #448]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	440b      	add	r3, r1
 8001a76:	331c      	adds	r3, #28
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	496b      	ldr	r1, [pc, #428]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	440b      	add	r3, r1
 8001a88:	332a      	adds	r3, #42	@ 0x2a
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f8bf 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001a94:	88fa      	ldrh	r2, [r7, #6]
 8001a96:	4965      	ldr	r1, [pc, #404]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	88fa      	ldrh	r2, [r7, #6]
 8001aa8:	4960      	ldr	r1, [pc, #384]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	440b      	add	r3, r1
 8001ab4:	332c      	adds	r3, #44	@ 0x2c
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f8a9 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	495a      	ldr	r1, [pc, #360]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	440b      	add	r3, r1
 8001ace:	3324      	adds	r3, #36	@ 0x24
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	4955      	ldr	r1, [pc, #340]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	440b      	add	r3, r1
 8001ae0:	332e      	adds	r3, #46	@ 0x2e
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f893 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	494f      	ldr	r1, [pc, #316]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	494b      	ldr	r1, [pc, #300]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	440b      	add	r3, r1
 8001b0a:	3310      	adds	r3, #16
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f868 	bl	8000be4 <HAL_GPIO_ReadPin>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4a43      	ldr	r2, [pc, #268]	@ (8001c30 <KEYPAD_Scan+0x2c0>)
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e005      	b.n	8001b38 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	4a40      	ldr	r2, [pc, #256]	@ (8001c30 <KEYPAD_Scan+0x2c0>)
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	493c      	ldr	r1, [pc, #240]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	3318      	adds	r3, #24
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	4937      	ldr	r1, [pc, #220]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	440b      	add	r3, r1
 8001b58:	3328      	adds	r3, #40	@ 0x28
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f857 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	4931      	ldr	r1, [pc, #196]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	440b      	add	r3, r1
 8001b72:	331c      	adds	r3, #28
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	492c      	ldr	r1, [pc, #176]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	440b      	add	r3, r1
 8001b84:	332a      	adds	r3, #42	@ 0x2a
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff f841 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	4926      	ldr	r1, [pc, #152]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3320      	adds	r3, #32
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	4921      	ldr	r1, [pc, #132]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	440b      	add	r3, r1
 8001bb0:	332c      	adds	r3, #44	@ 0x2c
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff f82b 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	491b      	ldr	r1, [pc, #108]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	440b      	add	r3, r1
 8001bca:	3324      	adds	r3, #36	@ 0x24
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	4916      	ldr	r1, [pc, #88]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	440b      	add	r3, r1
 8001bdc:	332e      	adds	r3, #46	@ 0x2e
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7ff f815 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	4910      	ldr	r1, [pc, #64]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	440b      	add	r3, r1
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <KEYPAD_Scan+0x2bc>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	3310      	adds	r3, #16
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe ffea 	bl	8000be4 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <KEYPAD_Scan+0x2c0>)
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	3301      	adds	r3, #1
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e00b      	b.n	8001c42 <KEYPAD_Scan+0x2d2>
 8001c2a:	bf00      	nop
 8001c2c:	0800442c 	.word	0x0800442c
 8001c30:	200000ec 	.word	0x200000ec
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	4a7f      	ldr	r2, [pc, #508]	@ (8001e34 <KEYPAD_Scan+0x4c4>)
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	497c      	ldr	r1, [pc, #496]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	440b      	add	r3, r1
 8001c50:	3318      	adds	r3, #24
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	4978      	ldr	r1, [pc, #480]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	440b      	add	r3, r1
 8001c62:	3328      	adds	r3, #40	@ 0x28
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffd2 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	4971      	ldr	r1, [pc, #452]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	331c      	adds	r3, #28
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	496d      	ldr	r1, [pc, #436]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	332a      	adds	r3, #42	@ 0x2a
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe ffbc 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	4966      	ldr	r1, [pc, #408]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3320      	adds	r3, #32
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	4962      	ldr	r1, [pc, #392]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	332c      	adds	r3, #44	@ 0x2c
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ffa6 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	495b      	ldr	r1, [pc, #364]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3324      	adds	r3, #36	@ 0x24
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	4957      	ldr	r1, [pc, #348]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	440b      	add	r3, r1
 8001ce6:	332e      	adds	r3, #46	@ 0x2e
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe ff90 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	4950      	ldr	r1, [pc, #320]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	494c      	ldr	r1, [pc, #304]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	440b      	add	r3, r1
 8001d10:	3310      	adds	r3, #16
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff65 	bl	8000be4 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4a43      	ldr	r2, [pc, #268]	@ (8001e34 <KEYPAD_Scan+0x4c4>)
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e006      	b.n	8001d42 <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4a3f      	ldr	r2, [pc, #252]	@ (8001e34 <KEYPAD_Scan+0x4c4>)
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	493c      	ldr	r1, [pc, #240]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	440b      	add	r3, r1
 8001d50:	3318      	adds	r3, #24
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	4938      	ldr	r1, [pc, #224]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	440b      	add	r3, r1
 8001d62:	3328      	adds	r3, #40	@ 0x28
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe ff52 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	4931      	ldr	r1, [pc, #196]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	440b      	add	r3, r1
 8001d7c:	331c      	adds	r3, #28
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	492d      	ldr	r1, [pc, #180]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	440b      	add	r3, r1
 8001d8e:	332a      	adds	r3, #42	@ 0x2a
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff3c 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	4926      	ldr	r1, [pc, #152]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	440b      	add	r3, r1
 8001da8:	3320      	adds	r3, #32
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	88fa      	ldrh	r2, [r7, #6]
 8001dae:	4922      	ldr	r1, [pc, #136]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	332c      	adds	r3, #44	@ 0x2c
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff26 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	491b      	ldr	r1, [pc, #108]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3324      	adds	r3, #36	@ 0x24
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	4917      	ldr	r1, [pc, #92]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	440b      	add	r3, r1
 8001de6:	332e      	adds	r3, #46	@ 0x2e
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe ff10 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001df2:	88fa      	ldrh	r2, [r7, #6]
 8001df4:	4910      	ldr	r1, [pc, #64]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	440b      	add	r3, r1
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <KEYPAD_Scan+0x4c8>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	440b      	add	r3, r1
 8001e10:	3310      	adds	r3, #16
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fee5 	bl	8000be4 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d026      	beq.n	8001e72 <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	4a03      	ldr	r2, [pc, #12]	@ (8001e34 <KEYPAD_Scan+0x4c4>)
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e01e      	b.n	8001e72 <KEYPAD_Scan+0x502>
 8001e34:	200000ec 	.word	0x200000ec
 8001e38:	0800442c 	.word	0x0800442c
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	4a8c      	ldr	r2, [pc, #560]	@ (8002070 <KEYPAD_Scan+0x700>)
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4a89      	ldr	r2, [pc, #548]	@ (8002070 <KEYPAD_Scan+0x700>)
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	3301      	adds	r3, #1
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	4a85      	ldr	r2, [pc, #532]	@ (8002070 <KEYPAD_Scan+0x700>)
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	4a82      	ldr	r2, [pc, #520]	@ (8002070 <KEYPAD_Scan+0x700>)
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 8001e72:	7a7b      	ldrb	r3, [r7, #9]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8205 	beq.w	8002284 <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	497d      	ldr	r1, [pc, #500]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	440b      	add	r3, r1
 8001e88:	3318      	adds	r3, #24
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	88fa      	ldrh	r2, [r7, #6]
 8001e8e:	4979      	ldr	r1, [pc, #484]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	440b      	add	r3, r1
 8001e9a:	3328      	adds	r3, #40	@ 0x28
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe feb6 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001ea6:	88fa      	ldrh	r2, [r7, #6]
 8001ea8:	4972      	ldr	r1, [pc, #456]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	440b      	add	r3, r1
 8001eb4:	331c      	adds	r3, #28
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	496e      	ldr	r1, [pc, #440]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	440b      	add	r3, r1
 8001ec6:	332a      	adds	r3, #42	@ 0x2a
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fea0 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001ed2:	88fa      	ldrh	r2, [r7, #6]
 8001ed4:	4967      	ldr	r1, [pc, #412]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	440b      	add	r3, r1
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	88fa      	ldrh	r2, [r7, #6]
 8001ee6:	4963      	ldr	r1, [pc, #396]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	440b      	add	r3, r1
 8001ef2:	332c      	adds	r3, #44	@ 0x2c
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe8a 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	495c      	ldr	r1, [pc, #368]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3324      	adds	r3, #36	@ 0x24
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	4958      	ldr	r1, [pc, #352]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	440b      	add	r3, r1
 8001f1e:	332e      	adds	r3, #46	@ 0x2e
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fe74 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	4951      	ldr	r1, [pc, #324]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	440b      	add	r3, r1
 8001f38:	3304      	adds	r3, #4
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	494d      	ldr	r1, [pc, #308]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	440b      	add	r3, r1
 8001f4a:	3312      	adds	r3, #18
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fe48 	bl	8000be4 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	4a43      	ldr	r2, [pc, #268]	@ (8002070 <KEYPAD_Scan+0x700>)
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	3304      	adds	r3, #4
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e006      	b.n	8001f7c <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	4a3f      	ldr	r2, [pc, #252]	@ (8002070 <KEYPAD_Scan+0x700>)
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	3304      	adds	r3, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	493d      	ldr	r1, [pc, #244]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	440b      	add	r3, r1
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	4938      	ldr	r1, [pc, #224]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3328      	adds	r3, #40	@ 0x28
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fe35 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001fa8:	88fa      	ldrh	r2, [r7, #6]
 8001faa:	4932      	ldr	r1, [pc, #200]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	440b      	add	r3, r1
 8001fb6:	331c      	adds	r3, #28
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	492d      	ldr	r1, [pc, #180]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	440b      	add	r3, r1
 8001fc8:	332a      	adds	r3, #42	@ 0x2a
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fe1f 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	4927      	ldr	r1, [pc, #156]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	4922      	ldr	r1, [pc, #136]	@ (8002074 <KEYPAD_Scan+0x704>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	440b      	add	r3, r1
 8001ff4:	332c      	adds	r3, #44	@ 0x2c
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fe09 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	491c      	ldr	r1, [pc, #112]	@ (8002074 <KEYPAD_Scan+0x704>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	440b      	add	r3, r1
 800200e:	3324      	adds	r3, #36	@ 0x24
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	4917      	ldr	r1, [pc, #92]	@ (8002074 <KEYPAD_Scan+0x704>)
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	440b      	add	r3, r1
 8002020:	332e      	adds	r3, #46	@ 0x2e
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2200      	movs	r2, #0
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fdf3 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	4911      	ldr	r1, [pc, #68]	@ (8002074 <KEYPAD_Scan+0x704>)
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	440b      	add	r3, r1
 800203a:	3304      	adds	r3, #4
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	88fa      	ldrh	r2, [r7, #6]
 8002040:	490c      	ldr	r1, [pc, #48]	@ (8002074 <KEYPAD_Scan+0x704>)
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	440b      	add	r3, r1
 800204c:	3312      	adds	r3, #18
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fdc7 	bl	8000be4 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800205a:	7bbb      	ldrb	r3, [r7, #14]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	4a03      	ldr	r2, [pc, #12]	@ (8002070 <KEYPAD_Scan+0x700>)
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	3305      	adds	r3, #5
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e00a      	b.n	8002086 <KEYPAD_Scan+0x716>
 8002070:	200000ec 	.word	0x200000ec
 8002074:	0800442c 	.word	0x0800442c
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	4a80      	ldr	r2, [pc, #512]	@ (800227c <KEYPAD_Scan+0x90c>)
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	3305      	adds	r3, #5
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002086:	88fa      	ldrh	r2, [r7, #6]
 8002088:	497d      	ldr	r1, [pc, #500]	@ (8002280 <KEYPAD_Scan+0x910>)
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	440b      	add	r3, r1
 8002094:	3318      	adds	r3, #24
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	4979      	ldr	r1, [pc, #484]	@ (8002280 <KEYPAD_Scan+0x910>)
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	440b      	add	r3, r1
 80020a6:	3328      	adds	r3, #40	@ 0x28
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fdb0 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	4972      	ldr	r1, [pc, #456]	@ (8002280 <KEYPAD_Scan+0x910>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	440b      	add	r3, r1
 80020c0:	331c      	adds	r3, #28
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	88fa      	ldrh	r2, [r7, #6]
 80020c6:	496e      	ldr	r1, [pc, #440]	@ (8002280 <KEYPAD_Scan+0x910>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	440b      	add	r3, r1
 80020d2:	332a      	adds	r3, #42	@ 0x2a
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fd9a 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	4967      	ldr	r1, [pc, #412]	@ (8002280 <KEYPAD_Scan+0x910>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	440b      	add	r3, r1
 80020ec:	3320      	adds	r3, #32
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	4963      	ldr	r1, [pc, #396]	@ (8002280 <KEYPAD_Scan+0x910>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	440b      	add	r3, r1
 80020fe:	332c      	adds	r3, #44	@ 0x2c
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd84 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	495c      	ldr	r1, [pc, #368]	@ (8002280 <KEYPAD_Scan+0x910>)
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	440b      	add	r3, r1
 8002118:	3324      	adds	r3, #36	@ 0x24
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	88fa      	ldrh	r2, [r7, #6]
 800211e:	4958      	ldr	r1, [pc, #352]	@ (8002280 <KEYPAD_Scan+0x910>)
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	440b      	add	r3, r1
 800212a:	332e      	adds	r3, #46	@ 0x2e
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd6e 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	4951      	ldr	r1, [pc, #324]	@ (8002280 <KEYPAD_Scan+0x910>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	494d      	ldr	r1, [pc, #308]	@ (8002280 <KEYPAD_Scan+0x910>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	440b      	add	r3, r1
 8002156:	3312      	adds	r3, #18
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd42 	bl	8000be4 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4a43      	ldr	r2, [pc, #268]	@ (800227c <KEYPAD_Scan+0x90c>)
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	3306      	adds	r3, #6
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e006      	b.n	8002188 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4a3f      	ldr	r2, [pc, #252]	@ (800227c <KEYPAD_Scan+0x90c>)
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	3306      	adds	r3, #6
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	493d      	ldr	r1, [pc, #244]	@ (8002280 <KEYPAD_Scan+0x910>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	440b      	add	r3, r1
 8002196:	3318      	adds	r3, #24
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	4938      	ldr	r1, [pc, #224]	@ (8002280 <KEYPAD_Scan+0x910>)
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	440b      	add	r3, r1
 80021a8:	3328      	adds	r3, #40	@ 0x28
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fd2f 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80021b4:	88fa      	ldrh	r2, [r7, #6]
 80021b6:	4932      	ldr	r1, [pc, #200]	@ (8002280 <KEYPAD_Scan+0x910>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	440b      	add	r3, r1
 80021c2:	331c      	adds	r3, #28
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	492d      	ldr	r1, [pc, #180]	@ (8002280 <KEYPAD_Scan+0x910>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	440b      	add	r3, r1
 80021d4:	332a      	adds	r3, #42	@ 0x2a
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fd19 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	4927      	ldr	r1, [pc, #156]	@ (8002280 <KEYPAD_Scan+0x910>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	3320      	adds	r3, #32
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	4922      	ldr	r1, [pc, #136]	@ (8002280 <KEYPAD_Scan+0x910>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	332c      	adds	r3, #44	@ 0x2c
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fd03 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	491c      	ldr	r1, [pc, #112]	@ (8002280 <KEYPAD_Scan+0x910>)
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	440b      	add	r3, r1
 800221a:	3324      	adds	r3, #36	@ 0x24
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	4917      	ldr	r1, [pc, #92]	@ (8002280 <KEYPAD_Scan+0x910>)
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	332e      	adds	r3, #46	@ 0x2e
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fced 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	4911      	ldr	r1, [pc, #68]	@ (8002280 <KEYPAD_Scan+0x910>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	440b      	add	r3, r1
 8002246:	3304      	adds	r3, #4
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <KEYPAD_Scan+0x910>)
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	440b      	add	r3, r1
 8002258:	3312      	adds	r3, #18
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fcc1 	bl	8000be4 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002266:	7bbb      	ldrb	r3, [r7, #14]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d027      	beq.n	80022bc <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4a03      	ldr	r2, [pc, #12]	@ (800227c <KEYPAD_Scan+0x90c>)
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	3307      	adds	r3, #7
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e01f      	b.n	80022bc <KEYPAD_Scan+0x94c>
 800227c:	200000ec 	.word	0x200000ec
 8002280:	0800442c 	.word	0x0800442c
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4a8d      	ldr	r2, [pc, #564]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	3304      	adds	r3, #4
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	4a89      	ldr	r2, [pc, #548]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	3305      	adds	r3, #5
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	4a86      	ldr	r2, [pc, #536]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	3306      	adds	r3, #6
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4a82      	ldr	r2, [pc, #520]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	3307      	adds	r3, #7
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 80022bc:	7abb      	ldrb	r3, [r7, #10]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8206 	beq.w	80026d0 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	497e      	ldr	r1, [pc, #504]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	3318      	adds	r3, #24
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	4979      	ldr	r1, [pc, #484]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	440b      	add	r3, r1
 80022e4:	3328      	adds	r3, #40	@ 0x28
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fc91 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	4973      	ldr	r1, [pc, #460]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	331c      	adds	r3, #28
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	496e      	ldr	r1, [pc, #440]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	440b      	add	r3, r1
 8002310:	332a      	adds	r3, #42	@ 0x2a
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc7b 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	4968      	ldr	r1, [pc, #416]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	440b      	add	r3, r1
 800232a:	3320      	adds	r3, #32
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	4963      	ldr	r1, [pc, #396]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	440b      	add	r3, r1
 800233c:	332c      	adds	r3, #44	@ 0x2c
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc65 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	495d      	ldr	r1, [pc, #372]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	3324      	adds	r3, #36	@ 0x24
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	4958      	ldr	r1, [pc, #352]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	440b      	add	r3, r1
 8002368:	332e      	adds	r3, #46	@ 0x2e
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc4f 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	4952      	ldr	r1, [pc, #328]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	3308      	adds	r3, #8
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	494d      	ldr	r1, [pc, #308]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	3314      	adds	r3, #20
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fc23 	bl	8000be4 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	4a44      	ldr	r2, [pc, #272]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	3308      	adds	r3, #8
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e006      	b.n	80023c6 <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4a40      	ldr	r2, [pc, #256]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	3308      	adds	r3, #8
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	493d      	ldr	r1, [pc, #244]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	440b      	add	r3, r1
 80023d4:	3318      	adds	r3, #24
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	4939      	ldr	r1, [pc, #228]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	3328      	adds	r3, #40	@ 0x28
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fc10 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	4932      	ldr	r1, [pc, #200]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	331c      	adds	r3, #28
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	492e      	ldr	r1, [pc, #184]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	440b      	add	r3, r1
 8002412:	332a      	adds	r3, #42	@ 0x2a
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	2201      	movs	r2, #1
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbfa 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	4927      	ldr	r1, [pc, #156]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	440b      	add	r3, r1
 800242c:	3320      	adds	r3, #32
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	4923      	ldr	r1, [pc, #140]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	440b      	add	r3, r1
 800243e:	332c      	adds	r3, #44	@ 0x2c
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fbe4 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	491c      	ldr	r1, [pc, #112]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	440b      	add	r3, r1
 8002458:	3324      	adds	r3, #36	@ 0x24
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	4918      	ldr	r1, [pc, #96]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	440b      	add	r3, r1
 800246a:	332e      	adds	r3, #46	@ 0x2e
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f7fe fbce 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	4911      	ldr	r1, [pc, #68]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	440b      	add	r3, r1
 8002484:	3308      	adds	r3, #8
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <KEYPAD_Scan+0xb50>)
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	440b      	add	r3, r1
 8002496:	3314      	adds	r3, #20
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fba2 	bl	8000be4 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4a03      	ldr	r2, [pc, #12]	@ (80024bc <KEYPAD_Scan+0xb4c>)
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	3309      	adds	r3, #9
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e00b      	b.n	80024d2 <KEYPAD_Scan+0xb62>
 80024ba:	bf00      	nop
 80024bc:	200000ec 	.word	0x200000ec
 80024c0:	0800442c 	.word	0x0800442c
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	4a80      	ldr	r2, [pc, #512]	@ (80026c8 <KEYPAD_Scan+0xd58>)
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	3309      	adds	r3, #9
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	497d      	ldr	r1, [pc, #500]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	440b      	add	r3, r1
 80024e0:	3318      	adds	r3, #24
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	88fa      	ldrh	r2, [r7, #6]
 80024e6:	4979      	ldr	r1, [pc, #484]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	440b      	add	r3, r1
 80024f2:	3328      	adds	r3, #40	@ 0x28
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe fb8a 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	4972      	ldr	r1, [pc, #456]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	440b      	add	r3, r1
 800250c:	331c      	adds	r3, #28
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	496e      	ldr	r1, [pc, #440]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	440b      	add	r3, r1
 800251e:	332a      	adds	r3, #42	@ 0x2a
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fb74 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	4967      	ldr	r1, [pc, #412]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	440b      	add	r3, r1
 8002538:	3320      	adds	r3, #32
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	4963      	ldr	r1, [pc, #396]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	440b      	add	r3, r1
 800254a:	332c      	adds	r3, #44	@ 0x2c
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb5e 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	495c      	ldr	r1, [pc, #368]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	440b      	add	r3, r1
 8002564:	3324      	adds	r3, #36	@ 0x24
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	4958      	ldr	r1, [pc, #352]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	440b      	add	r3, r1
 8002576:	332e      	adds	r3, #46	@ 0x2e
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fb48 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	4951      	ldr	r1, [pc, #324]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	440b      	add	r3, r1
 8002590:	3308      	adds	r3, #8
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	494d      	ldr	r1, [pc, #308]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	440b      	add	r3, r1
 80025a2:	3314      	adds	r3, #20
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7fe fb1c 	bl	8000be4 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80025b0:	7bbb      	ldrb	r3, [r7, #14]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	4a43      	ldr	r2, [pc, #268]	@ (80026c8 <KEYPAD_Scan+0xd58>)
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	330a      	adds	r3, #10
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e006      	b.n	80025d4 <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4a3f      	ldr	r2, [pc, #252]	@ (80026c8 <KEYPAD_Scan+0xd58>)
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	330a      	adds	r3, #10
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	493d      	ldr	r1, [pc, #244]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	440b      	add	r3, r1
 80025e2:	3318      	adds	r3, #24
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	4938      	ldr	r1, [pc, #224]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	3328      	adds	r3, #40	@ 0x28
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe fb09 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	4932      	ldr	r1, [pc, #200]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	440b      	add	r3, r1
 800260e:	331c      	adds	r3, #28
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	492d      	ldr	r1, [pc, #180]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	440b      	add	r3, r1
 8002620:	332a      	adds	r3, #42	@ 0x2a
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe faf3 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	4927      	ldr	r1, [pc, #156]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	440b      	add	r3, r1
 800263a:	3320      	adds	r3, #32
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	4922      	ldr	r1, [pc, #136]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	440b      	add	r3, r1
 800264c:	332c      	adds	r3, #44	@ 0x2c
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fadd 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	491c      	ldr	r1, [pc, #112]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	440b      	add	r3, r1
 8002666:	3324      	adds	r3, #36	@ 0x24
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	4917      	ldr	r1, [pc, #92]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	440b      	add	r3, r1
 8002678:	332e      	adds	r3, #46	@ 0x2e
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	2201      	movs	r2, #1
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fac7 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	4911      	ldr	r1, [pc, #68]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	440b      	add	r3, r1
 8002692:	3308      	adds	r3, #8
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	490c      	ldr	r1, [pc, #48]	@ (80026cc <KEYPAD_Scan+0xd5c>)
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	440b      	add	r3, r1
 80026a4:	3314      	adds	r3, #20
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa9b 	bl	8000be4 <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d027      	beq.n	8002708 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4a03      	ldr	r2, [pc, #12]	@ (80026c8 <KEYPAD_Scan+0xd58>)
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	330b      	adds	r3, #11
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e01f      	b.n	8002708 <KEYPAD_Scan+0xd98>
 80026c8:	200000ec 	.word	0x200000ec
 80026cc:	0800442c 	.word	0x0800442c
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4a8d      	ldr	r2, [pc, #564]	@ (8002908 <KEYPAD_Scan+0xf98>)
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	3308      	adds	r3, #8
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	4a89      	ldr	r2, [pc, #548]	@ (8002908 <KEYPAD_Scan+0xf98>)
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	3309      	adds	r3, #9
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	4a86      	ldr	r2, [pc, #536]	@ (8002908 <KEYPAD_Scan+0xf98>)
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	330a      	adds	r3, #10
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4a82      	ldr	r2, [pc, #520]	@ (8002908 <KEYPAD_Scan+0xf98>)
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	330b      	adds	r3, #11
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8202 	beq.w	8002b14 <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	497e      	ldr	r1, [pc, #504]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	440b      	add	r3, r1
 800271e:	3318      	adds	r3, #24
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	4979      	ldr	r1, [pc, #484]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	440b      	add	r3, r1
 8002730:	3328      	adds	r3, #40	@ 0x28
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa6b 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	4973      	ldr	r1, [pc, #460]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	440b      	add	r3, r1
 800274a:	331c      	adds	r3, #28
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	496e      	ldr	r1, [pc, #440]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	332a      	adds	r3, #42	@ 0x2a
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa55 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	4968      	ldr	r1, [pc, #416]	@ (800290c <KEYPAD_Scan+0xf9c>)
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	440b      	add	r3, r1
 8002776:	3320      	adds	r3, #32
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	4963      	ldr	r1, [pc, #396]	@ (800290c <KEYPAD_Scan+0xf9c>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	440b      	add	r3, r1
 8002788:	332c      	adds	r3, #44	@ 0x2c
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe fa3f 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	495d      	ldr	r1, [pc, #372]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	440b      	add	r3, r1
 80027a2:	3324      	adds	r3, #36	@ 0x24
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	4958      	ldr	r1, [pc, #352]	@ (800290c <KEYPAD_Scan+0xf9c>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	440b      	add	r3, r1
 80027b4:	332e      	adds	r3, #46	@ 0x2e
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe fa29 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	4952      	ldr	r1, [pc, #328]	@ (800290c <KEYPAD_Scan+0xf9c>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	440b      	add	r3, r1
 80027ce:	330c      	adds	r3, #12
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	494d      	ldr	r1, [pc, #308]	@ (800290c <KEYPAD_Scan+0xf9c>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	440b      	add	r3, r1
 80027e0:	3316      	adds	r3, #22
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe f9fd 	bl	8000be4 <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80027ee:	7bbb      	ldrb	r3, [r7, #14]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	4a44      	ldr	r2, [pc, #272]	@ (8002908 <KEYPAD_Scan+0xf98>)
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	330c      	adds	r3, #12
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e006      	b.n	8002812 <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4a40      	ldr	r2, [pc, #256]	@ (8002908 <KEYPAD_Scan+0xf98>)
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	330c      	adds	r3, #12
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	493d      	ldr	r1, [pc, #244]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	440b      	add	r3, r1
 8002820:	3318      	adds	r3, #24
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	4939      	ldr	r1, [pc, #228]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	3328      	adds	r3, #40	@ 0x28
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe f9ea 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	4932      	ldr	r1, [pc, #200]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	440b      	add	r3, r1
 800284c:	331c      	adds	r3, #28
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	492e      	ldr	r1, [pc, #184]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	440b      	add	r3, r1
 800285e:	332a      	adds	r3, #42	@ 0x2a
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f9d4 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	4927      	ldr	r1, [pc, #156]	@ (800290c <KEYPAD_Scan+0xf9c>)
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	440b      	add	r3, r1
 8002878:	3320      	adds	r3, #32
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	4923      	ldr	r1, [pc, #140]	@ (800290c <KEYPAD_Scan+0xf9c>)
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	440b      	add	r3, r1
 800288a:	332c      	adds	r3, #44	@ 0x2c
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f9be 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	491c      	ldr	r1, [pc, #112]	@ (800290c <KEYPAD_Scan+0xf9c>)
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	440b      	add	r3, r1
 80028a4:	3324      	adds	r3, #36	@ 0x24
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	4918      	ldr	r1, [pc, #96]	@ (800290c <KEYPAD_Scan+0xf9c>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	440b      	add	r3, r1
 80028b6:	332e      	adds	r3, #46	@ 0x2e
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f9a8 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	4911      	ldr	r1, [pc, #68]	@ (800290c <KEYPAD_Scan+0xf9c>)
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	440b      	add	r3, r1
 80028d0:	330c      	adds	r3, #12
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	490d      	ldr	r1, [pc, #52]	@ (800290c <KEYPAD_Scan+0xf9c>)
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	440b      	add	r3, r1
 80028e2:	3316      	adds	r3, #22
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f97c 	bl	8000be4 <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	4a03      	ldr	r2, [pc, #12]	@ (8002908 <KEYPAD_Scan+0xf98>)
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	330d      	adds	r3, #13
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e00b      	b.n	800291e <KEYPAD_Scan+0xfae>
 8002906:	bf00      	nop
 8002908:	200000ec 	.word	0x200000ec
 800290c:	0800442c 	.word	0x0800442c
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4aab      	ldr	r2, [pc, #684]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	330d      	adds	r3, #13
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	49a8      	ldr	r1, [pc, #672]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	440b      	add	r3, r1
 800292c:	3318      	adds	r3, #24
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	49a4      	ldr	r1, [pc, #656]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	440b      	add	r3, r1
 800293e:	3328      	adds	r3, #40	@ 0x28
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	4619      	mov	r1, r3
 8002946:	f7fe f964 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	499d      	ldr	r1, [pc, #628]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	440b      	add	r3, r1
 8002958:	331c      	adds	r3, #28
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	4999      	ldr	r1, [pc, #612]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	440b      	add	r3, r1
 800296a:	332a      	adds	r3, #42	@ 0x2a
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f94e 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	4992      	ldr	r1, [pc, #584]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	440b      	add	r3, r1
 8002984:	3320      	adds	r3, #32
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	498e      	ldr	r1, [pc, #568]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	440b      	add	r3, r1
 8002996:	332c      	adds	r3, #44	@ 0x2c
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f938 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	4987      	ldr	r1, [pc, #540]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	440b      	add	r3, r1
 80029b0:	3324      	adds	r3, #36	@ 0x24
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	4983      	ldr	r1, [pc, #524]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	440b      	add	r3, r1
 80029c2:	332e      	adds	r3, #46	@ 0x2e
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f922 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	497c      	ldr	r1, [pc, #496]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	440b      	add	r3, r1
 80029dc:	330c      	adds	r3, #12
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	4978      	ldr	r1, [pc, #480]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	440b      	add	r3, r1
 80029ee:	3316      	adds	r3, #22
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f8f6 	bl	8000be4 <HAL_GPIO_ReadPin>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	330e      	adds	r3, #14
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e006      	b.n	8002a20 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	330e      	adds	r3, #14
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	4968      	ldr	r1, [pc, #416]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3318      	adds	r3, #24
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	4963      	ldr	r1, [pc, #396]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	440b      	add	r3, r1
 8002a40:	3328      	adds	r3, #40	@ 0x28
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7fe f8e3 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	495d      	ldr	r1, [pc, #372]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	440b      	add	r3, r1
 8002a5a:	331c      	adds	r3, #28
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	4958      	ldr	r1, [pc, #352]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	440b      	add	r3, r1
 8002a6c:	332a      	adds	r3, #42	@ 0x2a
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2200      	movs	r2, #0
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f8cd 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	4952      	ldr	r1, [pc, #328]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	440b      	add	r3, r1
 8002a86:	3320      	adds	r3, #32
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	494d      	ldr	r1, [pc, #308]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	440b      	add	r3, r1
 8002a98:	332c      	adds	r3, #44	@ 0x2c
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fe f8b7 	bl	8000c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	4947      	ldr	r1, [pc, #284]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3324      	adds	r3, #36	@ 0x24
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	4942      	ldr	r1, [pc, #264]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	440b      	add	r3, r1
 8002ac4:	332e      	adds	r3, #46	@ 0x2e
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f8a1 	bl	8000c12 <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	493c      	ldr	r1, [pc, #240]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	440b      	add	r3, r1
 8002ade:	330c      	adds	r3, #12
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	4937      	ldr	r1, [pc, #220]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	440b      	add	r3, r1
 8002af0:	3316      	adds	r3, #22
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f875 	bl	8000be4 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d035      	beq.n	8002b70 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	330f      	adds	r3, #15
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e02d      	b.n	8002b70 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	4a26      	ldr	r2, [pc, #152]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	330d      	adds	r3, #13
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	330e      	adds	r3, #14
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	330f      	adds	r3, #15
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e010      	b.n	8002b70 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e00a      	b.n	8002b6a <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <KEYPAD_Scan+0x1250>)
 8002b58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	4413      	add	r3, r2
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	3301      	adds	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d9f1      	bls.n	8002b54 <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e01c      	b.n	8002bb0 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	7bf9      	ldrb	r1, [r7, #15]
 8002b7a:	4812      	ldr	r0, [pc, #72]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3306      	adds	r3, #6
 8002b88:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	7bf9      	ldrb	r1, [r7, #15]
 8002b90:	4c0c      	ldr	r4, [pc, #48]	@ (8002bc4 <KEYPAD_Scan+0x1254>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3314      	adds	r3, #20
 8002b9e:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fe f834 	bl	8000c12 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d9df      	bls.n	8002b76 <KEYPAD_Scan+0x1206>
	}
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}
 8002bc0:	200000ec 	.word	0x200000ec
 8002bc4:	0800442c 	.word	0x0800442c

08002bc8 <HAL_SYSTICK_Callback>:
	    }
    }
}

void HAL_SYSTICK_Callback(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_SYSTICK_Callback+0x34>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_SYSTICK_Callback+0x34>)
 8002bd4:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <HAL_SYSTICK_Callback+0x38>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_SYSTICK_Callback+0x38>)
 8002bde:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_SYSTICK_Callback+0x3c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <HAL_SYSTICK_Callback+0x3c>)
 8002be8:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <HAL_SYSTICK_Callback+0x40>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a05      	ldr	r2, [pc, #20]	@ (8002c08 <HAL_SYSTICK_Callback+0x40>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	200000f0 	.word	0x200000f0
 8002c00:	2000013c 	.word	0x2000013c
 8002c04:	20000140 	.word	0x20000140
 8002c08:	20000138 	.word	0x20000138

08002c0c <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fc21 	bl	800345c <iprintf>
	fflush(stdout);
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <logger_log_print_+0x24>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fb45 	bl	80032b0 <fflush>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000020 	.word	0x20000020

08002c34 <findslot>:
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <findslot+0x2c>)
 8002c36:	b510      	push	{r4, lr}
 8002c38:	4604      	mov	r4, r0
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	b118      	cbz	r0, 8002c46 <findslot+0x12>
 8002c3e:	6a03      	ldr	r3, [r0, #32]
 8002c40:	b90b      	cbnz	r3, 8002c46 <findslot+0x12>
 8002c42:	f000 fbd5 	bl	80033f0 <__sinit>
 8002c46:	2c13      	cmp	r4, #19
 8002c48:	d807      	bhi.n	8002c5a <findslot+0x26>
 8002c4a:	4806      	ldr	r0, [pc, #24]	@ (8002c64 <findslot+0x30>)
 8002c4c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002c50:	3201      	adds	r2, #1
 8002c52:	d002      	beq.n	8002c5a <findslot+0x26>
 8002c54:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	e7fc      	b.n	8002c58 <findslot+0x24>
 8002c5e:	bf00      	nop
 8002c60:	20000020 	.word	0x20000020
 8002c64:	20000150 	.word	0x20000150

08002c68 <error>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	f000 fcce 	bl	800360c <__errno>
 8002c70:	2613      	movs	r6, #19
 8002c72:	4605      	mov	r5, r0
 8002c74:	2700      	movs	r7, #0
 8002c76:	4630      	mov	r0, r6
 8002c78:	4639      	mov	r1, r7
 8002c7a:	beab      	bkpt	0x00ab
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	4620      	mov	r0, r4
 8002c80:	602e      	str	r6, [r5, #0]
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c84 <checkerror>:
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d101      	bne.n	8002c8c <checkerror+0x8>
 8002c88:	f7ff bfee 	b.w	8002c68 <error>
 8002c8c:	4770      	bx	lr

08002c8e <_swiread>:
 8002c8e:	b530      	push	{r4, r5, lr}
 8002c90:	b085      	sub	sp, #20
 8002c92:	2406      	movs	r4, #6
 8002c94:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c98:	9203      	str	r2, [sp, #12]
 8002c9a:	ad01      	add	r5, sp, #4
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	beab      	bkpt	0x00ab
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff ffed 	bl	8002c84 <checkerror>
 8002caa:	b005      	add	sp, #20
 8002cac:	bd30      	pop	{r4, r5, pc}

08002cae <_read>:
 8002cae:	b570      	push	{r4, r5, r6, lr}
 8002cb0:	460e      	mov	r6, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	f7ff ffbe 	bl	8002c34 <findslot>
 8002cb8:	4605      	mov	r5, r0
 8002cba:	b930      	cbnz	r0, 8002cca <_read+0x1c>
 8002cbc:	f000 fca6 	bl	800360c <__errno>
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	6003      	str	r3, [r0, #0]
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
 8002cca:	4622      	mov	r2, r4
 8002ccc:	4631      	mov	r1, r6
 8002cce:	6800      	ldr	r0, [r0, #0]
 8002cd0:	f7ff ffdd 	bl	8002c8e <_swiread>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d0f5      	beq.n	8002cc4 <_read+0x16>
 8002cd8:	686b      	ldr	r3, [r5, #4]
 8002cda:	1a20      	subs	r0, r4, r0
 8002cdc:	4403      	add	r3, r0
 8002cde:	606b      	str	r3, [r5, #4]
 8002ce0:	e7f2      	b.n	8002cc8 <_read+0x1a>

08002ce2 <_swilseek>:
 8002ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	4616      	mov	r6, r2
 8002ce8:	f7ff ffa4 	bl	8002c34 <findslot>
 8002cec:	4605      	mov	r5, r0
 8002cee:	b940      	cbnz	r0, 8002d02 <_swilseek+0x20>
 8002cf0:	f000 fc8c 	bl	800360c <__errno>
 8002cf4:	2309      	movs	r3, #9
 8002cf6:	6003      	str	r3, [r0, #0]
 8002cf8:	f04f 34ff 	mov.w	r4, #4294967295
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	b003      	add	sp, #12
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	2e02      	cmp	r6, #2
 8002d04:	d903      	bls.n	8002d0e <_swilseek+0x2c>
 8002d06:	f000 fc81 	bl	800360c <__errno>
 8002d0a:	2316      	movs	r3, #22
 8002d0c:	e7f3      	b.n	8002cf6 <_swilseek+0x14>
 8002d0e:	2e01      	cmp	r6, #1
 8002d10:	d112      	bne.n	8002d38 <_swilseek+0x56>
 8002d12:	6843      	ldr	r3, [r0, #4]
 8002d14:	18e4      	adds	r4, r4, r3
 8002d16:	d4f6      	bmi.n	8002d06 <_swilseek+0x24>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	260a      	movs	r6, #10
 8002d1c:	466f      	mov	r7, sp
 8002d1e:	e9cd 3400 	strd	r3, r4, [sp]
 8002d22:	4630      	mov	r0, r6
 8002d24:	4639      	mov	r1, r7
 8002d26:	beab      	bkpt	0x00ab
 8002d28:	4606      	mov	r6, r0
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	f7ff ffaa 	bl	8002c84 <checkerror>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	dbe1      	blt.n	8002cf8 <_swilseek+0x16>
 8002d34:	606c      	str	r4, [r5, #4]
 8002d36:	e7e1      	b.n	8002cfc <_swilseek+0x1a>
 8002d38:	2e02      	cmp	r6, #2
 8002d3a:	6803      	ldr	r3, [r0, #0]
 8002d3c:	d1ec      	bne.n	8002d18 <_swilseek+0x36>
 8002d3e:	260c      	movs	r6, #12
 8002d40:	466f      	mov	r7, sp
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4630      	mov	r0, r6
 8002d46:	4639      	mov	r1, r7
 8002d48:	beab      	bkpt	0x00ab
 8002d4a:	4606      	mov	r6, r0
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f7ff ff99 	bl	8002c84 <checkerror>
 8002d52:	1c43      	adds	r3, r0, #1
 8002d54:	d0d0      	beq.n	8002cf8 <_swilseek+0x16>
 8002d56:	4404      	add	r4, r0
 8002d58:	e7de      	b.n	8002d18 <_swilseek+0x36>

08002d5a <_lseek>:
 8002d5a:	f7ff bfc2 	b.w	8002ce2 <_swilseek>

08002d5e <_swiwrite>:
 8002d5e:	b530      	push	{r4, r5, lr}
 8002d60:	b085      	sub	sp, #20
 8002d62:	2405      	movs	r4, #5
 8002d64:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002d68:	9203      	str	r2, [sp, #12]
 8002d6a:	ad01      	add	r5, sp, #4
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	beab      	bkpt	0x00ab
 8002d72:	4604      	mov	r4, r0
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff ff85 	bl	8002c84 <checkerror>
 8002d7a:	b005      	add	sp, #20
 8002d7c:	bd30      	pop	{r4, r5, pc}

08002d7e <_write>:
 8002d7e:	b570      	push	{r4, r5, r6, lr}
 8002d80:	460e      	mov	r6, r1
 8002d82:	4615      	mov	r5, r2
 8002d84:	f7ff ff56 	bl	8002c34 <findslot>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	b930      	cbnz	r0, 8002d9a <_write+0x1c>
 8002d8c:	f000 fc3e 	bl	800360c <__errno>
 8002d90:	2309      	movs	r3, #9
 8002d92:	6003      	str	r3, [r0, #0]
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
 8002d9a:	462a      	mov	r2, r5
 8002d9c:	4631      	mov	r1, r6
 8002d9e:	6800      	ldr	r0, [r0, #0]
 8002da0:	f7ff ffdd 	bl	8002d5e <_swiwrite>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	dbf5      	blt.n	8002d94 <_write+0x16>
 8002da8:	6862      	ldr	r2, [r4, #4]
 8002daa:	1ae8      	subs	r0, r5, r3
 8002dac:	4402      	add	r2, r0
 8002dae:	42ab      	cmp	r3, r5
 8002db0:	6062      	str	r2, [r4, #4]
 8002db2:	d1f1      	bne.n	8002d98 <_write+0x1a>
 8002db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff bf55 	b.w	8002c68 <error>

08002dbe <_swiclose>:
 8002dbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dc0:	2402      	movs	r4, #2
 8002dc2:	9001      	str	r0, [sp, #4]
 8002dc4:	ad01      	add	r5, sp, #4
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	beab      	bkpt	0x00ab
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff ff58 	bl	8002c84 <checkerror>
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bd30      	pop	{r4, r5, pc}

08002dd8 <_close>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4605      	mov	r5, r0
 8002ddc:	f7ff ff2a 	bl	8002c34 <findslot>
 8002de0:	4604      	mov	r4, r0
 8002de2:	b930      	cbnz	r0, 8002df2 <_close+0x1a>
 8002de4:	f000 fc12 	bl	800360c <__errno>
 8002de8:	2309      	movs	r3, #9
 8002dea:	6003      	str	r3, [r0, #0]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	3d01      	subs	r5, #1
 8002df4:	2d01      	cmp	r5, #1
 8002df6:	d809      	bhi.n	8002e0c <_close+0x34>
 8002df8:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <_close+0x40>)
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d104      	bne.n	8002e0c <_close+0x34>
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	2000      	movs	r0, #0
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	e7f1      	b.n	8002df0 <_close+0x18>
 8002e0c:	6820      	ldr	r0, [r4, #0]
 8002e0e:	f7ff ffd6 	bl	8002dbe <_swiclose>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0f5      	beq.n	8002e02 <_close+0x2a>
 8002e16:	e7eb      	b.n	8002df0 <_close+0x18>
 8002e18:	20000150 	.word	0x20000150

08002e1c <_swistat>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	460c      	mov	r4, r1
 8002e20:	f7ff ff08 	bl	8002c34 <findslot>
 8002e24:	4605      	mov	r5, r0
 8002e26:	b930      	cbnz	r0, 8002e36 <_swistat+0x1a>
 8002e28:	f000 fbf0 	bl	800360c <__errno>
 8002e2c:	2309      	movs	r3, #9
 8002e2e:	6003      	str	r3, [r0, #0]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	6863      	ldr	r3, [r4, #4]
 8002e38:	260c      	movs	r6, #12
 8002e3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e3e:	6063      	str	r3, [r4, #4]
 8002e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e44:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002e46:	4630      	mov	r0, r6
 8002e48:	4629      	mov	r1, r5
 8002e4a:	beab      	bkpt	0x00ab
 8002e4c:	4605      	mov	r5, r0
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f7ff ff18 	bl	8002c84 <checkerror>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d0eb      	beq.n	8002e30 <_swistat+0x14>
 8002e58:	6120      	str	r0, [r4, #16]
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e7ea      	b.n	8002e34 <_swistat+0x18>

08002e5e <_fstat>:
 8002e5e:	460b      	mov	r3, r1
 8002e60:	b510      	push	{r4, lr}
 8002e62:	2100      	movs	r1, #0
 8002e64:	4604      	mov	r4, r0
 8002e66:	2258      	movs	r2, #88	@ 0x58
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fb80 	bl	800356e <memset>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	4620      	mov	r0, r4
 8002e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e76:	f7ff bfd1 	b.w	8002e1c <_swistat>

08002e7a <_stat>:
 8002e7a:	b538      	push	{r3, r4, r5, lr}
 8002e7c:	460d      	mov	r5, r1
 8002e7e:	4604      	mov	r4, r0
 8002e80:	2258      	movs	r2, #88	@ 0x58
 8002e82:	2100      	movs	r1, #0
 8002e84:	4628      	mov	r0, r5
 8002e86:	f000 fb72 	bl	800356e <memset>
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f000 f811 	bl	8002eb4 <_swiopen>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	4604      	mov	r4, r0
 8002e96:	d00b      	beq.n	8002eb0 <_stat+0x36>
 8002e98:	686b      	ldr	r3, [r5, #4]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002ea0:	606b      	str	r3, [r5, #4]
 8002ea2:	f7ff ffbb 	bl	8002e1c <_swistat>
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff ff95 	bl	8002dd8 <_close>
 8002eae:	462c      	mov	r4, r5
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}

08002eb4 <_swiopen>:
 8002eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb8:	4682      	mov	sl, r0
 8002eba:	460e      	mov	r6, r1
 8002ebc:	2400      	movs	r4, #0
 8002ebe:	4f28      	ldr	r7, [pc, #160]	@ (8002f60 <_swiopen+0xac>)
 8002ec0:	b096      	sub	sp, #88	@ 0x58
 8002ec2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002ec6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	d00c      	beq.n	8002ee8 <_swiopen+0x34>
 8002ece:	3401      	adds	r4, #1
 8002ed0:	2c14      	cmp	r4, #20
 8002ed2:	d1f6      	bne.n	8002ec2 <_swiopen+0xe>
 8002ed4:	f000 fb9a 	bl	800360c <__errno>
 8002ed8:	2318      	movs	r3, #24
 8002eda:	f04f 34ff 	mov.w	r4, #4294967295
 8002ede:	6003      	str	r3, [r0, #0]
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	b016      	add	sp, #88	@ 0x58
 8002ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002eec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002ef0:	46e9      	mov	r9, sp
 8002ef2:	d109      	bne.n	8002f08 <_swiopen+0x54>
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4650      	mov	r0, sl
 8002ef8:	f7ff ffbf 	bl	8002e7a <_stat>
 8002efc:	3001      	adds	r0, #1
 8002efe:	d003      	beq.n	8002f08 <_swiopen+0x54>
 8002f00:	f000 fb84 	bl	800360c <__errno>
 8002f04:	2311      	movs	r3, #17
 8002f06:	e7e8      	b.n	8002eda <_swiopen+0x26>
 8002f08:	f240 6301 	movw	r3, #1537	@ 0x601
 8002f0c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002f10:	07b2      	lsls	r2, r6, #30
 8002f12:	bf48      	it	mi
 8002f14:	f045 0502 	orrmi.w	r5, r5, #2
 8002f18:	421e      	tst	r6, r3
 8002f1a:	bf18      	it	ne
 8002f1c:	f045 0504 	orrne.w	r5, r5, #4
 8002f20:	0733      	lsls	r3, r6, #28
 8002f22:	bf48      	it	mi
 8002f24:	f025 0504 	bicmi.w	r5, r5, #4
 8002f28:	4650      	mov	r0, sl
 8002f2a:	bf48      	it	mi
 8002f2c:	f045 0508 	orrmi.w	r5, r5, #8
 8002f30:	f8cd a000 	str.w	sl, [sp]
 8002f34:	f7fd f90a 	bl	800014c <strlen>
 8002f38:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002f3c:	2501      	movs	r5, #1
 8002f3e:	4628      	mov	r0, r5
 8002f40:	4649      	mov	r1, r9
 8002f42:	beab      	bkpt	0x00ab
 8002f44:	4605      	mov	r5, r0
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	db05      	blt.n	8002f56 <_swiopen+0xa2>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002f50:	4447      	add	r7, r8
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	e7c4      	b.n	8002ee0 <_swiopen+0x2c>
 8002f56:	4628      	mov	r0, r5
 8002f58:	f7ff fe86 	bl	8002c68 <error>
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	e7bf      	b.n	8002ee0 <_swiopen+0x2c>
 8002f60:	20000150 	.word	0x20000150

08002f64 <_get_semihosting_exts>:
 8002f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	4829      	ldr	r0, [pc, #164]	@ (8003014 <_get_semihosting_exts+0xb0>)
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4615      	mov	r5, r2
 8002f72:	f7ff ff9f 	bl	8002eb4 <_swiopen>
 8002f76:	4604      	mov	r4, r0
 8002f78:	462a      	mov	r2, r5
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 faf6 	bl	800356e <memset>
 8002f82:	1c63      	adds	r3, r4, #1
 8002f84:	d014      	beq.n	8002fb0 <_get_semihosting_exts+0x4c>
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff fe54 	bl	8002c34 <findslot>
 8002f8c:	f04f 080c 	mov.w	r8, #12
 8002f90:	4681      	mov	r9, r0
 8002f92:	4640      	mov	r0, r8
 8002f94:	4649      	mov	r1, r9
 8002f96:	beab      	bkpt	0x00ab
 8002f98:	4680      	mov	r8, r0
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f7ff fe72 	bl	8002c84 <checkerror>
 8002fa0:	2803      	cmp	r0, #3
 8002fa2:	dd02      	ble.n	8002faa <_get_semihosting_exts+0x46>
 8002fa4:	1ec3      	subs	r3, r0, #3
 8002fa6:	42ab      	cmp	r3, r5
 8002fa8:	dc07      	bgt.n	8002fba <_get_semihosting_exts+0x56>
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff ff14 	bl	8002dd8 <_close>
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	b003      	add	sp, #12
 8002fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fba:	2204      	movs	r2, #4
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	eb0d 0102 	add.w	r1, sp, r2
 8002fc2:	f7ff fe74 	bl	8002cae <_read>
 8002fc6:	2803      	cmp	r0, #3
 8002fc8:	ddef      	ble.n	8002faa <_get_semihosting_exts+0x46>
 8002fca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002fce:	2b53      	cmp	r3, #83	@ 0x53
 8002fd0:	d1eb      	bne.n	8002faa <_get_semihosting_exts+0x46>
 8002fd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002fd6:	2b48      	cmp	r3, #72	@ 0x48
 8002fd8:	d1e7      	bne.n	8002faa <_get_semihosting_exts+0x46>
 8002fda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002fde:	2b46      	cmp	r3, #70	@ 0x46
 8002fe0:	d1e3      	bne.n	8002faa <_get_semihosting_exts+0x46>
 8002fe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002fe6:	2b42      	cmp	r3, #66	@ 0x42
 8002fe8:	d1df      	bne.n	8002faa <_get_semihosting_exts+0x46>
 8002fea:	2201      	movs	r2, #1
 8002fec:	4639      	mov	r1, r7
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff fe77 	bl	8002ce2 <_swilseek>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	dbd8      	blt.n	8002faa <_get_semihosting_exts+0x46>
 8002ff8:	462a      	mov	r2, r5
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f7ff fe56 	bl	8002cae <_read>
 8003002:	4605      	mov	r5, r0
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff fee7 	bl	8002dd8 <_close>
 800300a:	4628      	mov	r0, r5
 800300c:	f7ff fe3a 	bl	8002c84 <checkerror>
 8003010:	e7d0      	b.n	8002fb4 <_get_semihosting_exts+0x50>
 8003012:	bf00      	nop
 8003014:	08004460 	.word	0x08004460

08003018 <initialise_semihosting_exts>:
 8003018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800301a:	2100      	movs	r1, #0
 800301c:	2201      	movs	r2, #1
 800301e:	4d09      	ldr	r5, [pc, #36]	@ (8003044 <initialise_semihosting_exts+0x2c>)
 8003020:	4c09      	ldr	r4, [pc, #36]	@ (8003048 <initialise_semihosting_exts+0x30>)
 8003022:	a801      	add	r0, sp, #4
 8003024:	6029      	str	r1, [r5, #0]
 8003026:	6022      	str	r2, [r4, #0]
 8003028:	f7ff ff9c 	bl	8002f64 <_get_semihosting_exts>
 800302c:	2800      	cmp	r0, #0
 800302e:	dd07      	ble.n	8003040 <initialise_semihosting_exts+0x28>
 8003030:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003034:	f003 0201 	and.w	r2, r3, #1
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	602a      	str	r2, [r5, #0]
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	b003      	add	sp, #12
 8003042:	bd30      	pop	{r4, r5, pc}
 8003044:	20000010 	.word	0x20000010
 8003048:	2000000c 	.word	0x2000000c

0800304c <_has_ext_stdout_stderr>:
 800304c:	b510      	push	{r4, lr}
 800304e:	4c04      	ldr	r4, [pc, #16]	@ (8003060 <_has_ext_stdout_stderr+0x14>)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da01      	bge.n	800305a <_has_ext_stdout_stderr+0xe>
 8003056:	f7ff ffdf 	bl	8003018 <initialise_semihosting_exts>
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	bd10      	pop	{r4, pc}
 800305e:	bf00      	nop
 8003060:	2000000c 	.word	0x2000000c

08003064 <initialise_monitor_handles>:
 8003064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003068:	2303      	movs	r3, #3
 800306a:	2400      	movs	r4, #0
 800306c:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8003110 <initialise_monitor_handles+0xac>
 8003070:	b085      	sub	sp, #20
 8003072:	f8cd 9004 	str.w	r9, [sp, #4]
 8003076:	af01      	add	r7, sp, #4
 8003078:	9303      	str	r3, [sp, #12]
 800307a:	2501      	movs	r5, #1
 800307c:	9402      	str	r4, [sp, #8]
 800307e:	4628      	mov	r0, r5
 8003080:	4639      	mov	r1, r7
 8003082:	beab      	bkpt	0x00ab
 8003084:	4605      	mov	r5, r0
 8003086:	f04f 32ff 	mov.w	r2, #4294967295
 800308a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003114 <initialise_monitor_handles+0xb0>
 800308e:	4623      	mov	r3, r4
 8003090:	4c21      	ldr	r4, [pc, #132]	@ (8003118 <initialise_monitor_handles+0xb4>)
 8003092:	f8c8 5000 	str.w	r5, [r8]
 8003096:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800309a:	3301      	adds	r3, #1
 800309c:	2b14      	cmp	r3, #20
 800309e:	d1fa      	bne.n	8003096 <initialise_monitor_handles+0x32>
 80030a0:	f7ff ffd4 	bl	800304c <_has_ext_stdout_stderr>
 80030a4:	4d1d      	ldr	r5, [pc, #116]	@ (800311c <initialise_monitor_handles+0xb8>)
 80030a6:	b1d0      	cbz	r0, 80030de <initialise_monitor_handles+0x7a>
 80030a8:	f04f 0a03 	mov.w	sl, #3
 80030ac:	2304      	movs	r3, #4
 80030ae:	f8cd 9004 	str.w	r9, [sp, #4]
 80030b2:	2601      	movs	r6, #1
 80030b4:	f8cd a00c 	str.w	sl, [sp, #12]
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	4630      	mov	r0, r6
 80030bc:	4639      	mov	r1, r7
 80030be:	beab      	bkpt	0x00ab
 80030c0:	4683      	mov	fp, r0
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <initialise_monitor_handles+0xbc>)
 80030c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80030c8:	f8c3 b000 	str.w	fp, [r3]
 80030cc:	2308      	movs	r3, #8
 80030ce:	f8cd a00c 	str.w	sl, [sp, #12]
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	4630      	mov	r0, r6
 80030d6:	4639      	mov	r1, r7
 80030d8:	beab      	bkpt	0x00ab
 80030da:	4606      	mov	r6, r0
 80030dc:	602e      	str	r6, [r5, #0]
 80030de:	2600      	movs	r6, #0
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	6066      	str	r6, [r4, #4]
 80030e4:	3301      	adds	r3, #1
 80030e6:	bf02      	ittt	eq
 80030e8:	4b0d      	ldreq	r3, [pc, #52]	@ (8003120 <initialise_monitor_handles+0xbc>)
 80030ea:	681b      	ldreq	r3, [r3, #0]
 80030ec:	602b      	streq	r3, [r5, #0]
 80030ee:	f8d8 3000 	ldr.w	r3, [r8]
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	f7ff ffaa 	bl	800304c <_has_ext_stdout_stderr>
 80030f8:	b130      	cbz	r0, 8003108 <initialise_monitor_handles+0xa4>
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <initialise_monitor_handles+0xbc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003102:	682b      	ldr	r3, [r5, #0]
 8003104:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003108:	b005      	add	sp, #20
 800310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310e:	bf00      	nop
 8003110:	08004476 	.word	0x08004476
 8003114:	2000014c 	.word	0x2000014c
 8003118:	20000150 	.word	0x20000150
 800311c:	20000144 	.word	0x20000144
 8003120:	20000148 	.word	0x20000148

08003124 <_isatty>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	f7ff fd85 	bl	8002c34 <findslot>
 800312a:	2409      	movs	r4, #9
 800312c:	4605      	mov	r5, r0
 800312e:	b920      	cbnz	r0, 800313a <_isatty+0x16>
 8003130:	f000 fa6c 	bl	800360c <__errno>
 8003134:	6004      	str	r4, [r0, #0]
 8003136:	2000      	movs	r0, #0
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	4620      	mov	r0, r4
 800313c:	4629      	mov	r1, r5
 800313e:	beab      	bkpt	0x00ab
 8003140:	4604      	mov	r4, r0
 8003142:	2c01      	cmp	r4, #1
 8003144:	4620      	mov	r0, r4
 8003146:	d0f7      	beq.n	8003138 <_isatty+0x14>
 8003148:	f000 fa60 	bl	800360c <__errno>
 800314c:	2513      	movs	r5, #19
 800314e:	4604      	mov	r4, r0
 8003150:	2600      	movs	r6, #0
 8003152:	4628      	mov	r0, r5
 8003154:	4631      	mov	r1, r6
 8003156:	beab      	bkpt	0x00ab
 8003158:	4605      	mov	r5, r0
 800315a:	6025      	str	r5, [r4, #0]
 800315c:	e7eb      	b.n	8003136 <_isatty+0x12>
	...

08003160 <__sflush_r>:
 8003160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	0716      	lsls	r6, r2, #28
 8003168:	4605      	mov	r5, r0
 800316a:	460c      	mov	r4, r1
 800316c:	d454      	bmi.n	8003218 <__sflush_r+0xb8>
 800316e:	684b      	ldr	r3, [r1, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	dc02      	bgt.n	800317a <__sflush_r+0x1a>
 8003174:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	dd48      	ble.n	800320c <__sflush_r+0xac>
 800317a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800317c:	2e00      	cmp	r6, #0
 800317e:	d045      	beq.n	800320c <__sflush_r+0xac>
 8003180:	2300      	movs	r3, #0
 8003182:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003186:	682f      	ldr	r7, [r5, #0]
 8003188:	6a21      	ldr	r1, [r4, #32]
 800318a:	602b      	str	r3, [r5, #0]
 800318c:	d030      	beq.n	80031f0 <__sflush_r+0x90>
 800318e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	0759      	lsls	r1, r3, #29
 8003194:	d505      	bpl.n	80031a2 <__sflush_r+0x42>
 8003196:	6863      	ldr	r3, [r4, #4]
 8003198:	1ad2      	subs	r2, r2, r3
 800319a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800319c:	b10b      	cbz	r3, 80031a2 <__sflush_r+0x42>
 800319e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	4628      	mov	r0, r5
 80031a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031a8:	6a21      	ldr	r1, [r4, #32]
 80031aa:	47b0      	blx	r6
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	d106      	bne.n	80031c0 <__sflush_r+0x60>
 80031b2:	6829      	ldr	r1, [r5, #0]
 80031b4:	291d      	cmp	r1, #29
 80031b6:	d82b      	bhi.n	8003210 <__sflush_r+0xb0>
 80031b8:	4a28      	ldr	r2, [pc, #160]	@ (800325c <__sflush_r+0xfc>)
 80031ba:	410a      	asrs	r2, r1
 80031bc:	07d6      	lsls	r6, r2, #31
 80031be:	d427      	bmi.n	8003210 <__sflush_r+0xb0>
 80031c0:	2200      	movs	r2, #0
 80031c2:	6062      	str	r2, [r4, #4]
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	04d9      	lsls	r1, r3, #19
 80031c8:	6022      	str	r2, [r4, #0]
 80031ca:	d504      	bpl.n	80031d6 <__sflush_r+0x76>
 80031cc:	1c42      	adds	r2, r0, #1
 80031ce:	d101      	bne.n	80031d4 <__sflush_r+0x74>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	b903      	cbnz	r3, 80031d6 <__sflush_r+0x76>
 80031d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80031d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031d8:	602f      	str	r7, [r5, #0]
 80031da:	b1b9      	cbz	r1, 800320c <__sflush_r+0xac>
 80031dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <__sflush_r+0x8a>
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 fa3f 	bl	8003668 <_free_r>
 80031ea:	2300      	movs	r3, #0
 80031ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80031ee:	e00d      	b.n	800320c <__sflush_r+0xac>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4628      	mov	r0, r5
 80031f4:	47b0      	blx	r6
 80031f6:	4602      	mov	r2, r0
 80031f8:	1c50      	adds	r0, r2, #1
 80031fa:	d1c9      	bne.n	8003190 <__sflush_r+0x30>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0c6      	beq.n	8003190 <__sflush_r+0x30>
 8003202:	2b1d      	cmp	r3, #29
 8003204:	d001      	beq.n	800320a <__sflush_r+0xaa>
 8003206:	2b16      	cmp	r3, #22
 8003208:	d11d      	bne.n	8003246 <__sflush_r+0xe6>
 800320a:	602f      	str	r7, [r5, #0]
 800320c:	2000      	movs	r0, #0
 800320e:	e021      	b.n	8003254 <__sflush_r+0xf4>
 8003210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003214:	b21b      	sxth	r3, r3
 8003216:	e01a      	b.n	800324e <__sflush_r+0xee>
 8003218:	690f      	ldr	r7, [r1, #16]
 800321a:	2f00      	cmp	r7, #0
 800321c:	d0f6      	beq.n	800320c <__sflush_r+0xac>
 800321e:	0793      	lsls	r3, r2, #30
 8003220:	bf18      	it	ne
 8003222:	2300      	movne	r3, #0
 8003224:	680e      	ldr	r6, [r1, #0]
 8003226:	bf08      	it	eq
 8003228:	694b      	ldreq	r3, [r1, #20]
 800322a:	1bf6      	subs	r6, r6, r7
 800322c:	600f      	str	r7, [r1, #0]
 800322e:	608b      	str	r3, [r1, #8]
 8003230:	2e00      	cmp	r6, #0
 8003232:	ddeb      	ble.n	800320c <__sflush_r+0xac>
 8003234:	4633      	mov	r3, r6
 8003236:	463a      	mov	r2, r7
 8003238:	4628      	mov	r0, r5
 800323a:	6a21      	ldr	r1, [r4, #32]
 800323c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003240:	47e0      	blx	ip
 8003242:	2800      	cmp	r0, #0
 8003244:	dc07      	bgt.n	8003256 <__sflush_r+0xf6>
 8003246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800324a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800324e:	f04f 30ff 	mov.w	r0, #4294967295
 8003252:	81a3      	strh	r3, [r4, #12]
 8003254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003256:	4407      	add	r7, r0
 8003258:	1a36      	subs	r6, r6, r0
 800325a:	e7e9      	b.n	8003230 <__sflush_r+0xd0>
 800325c:	dfbffffe 	.word	0xdfbffffe

08003260 <_fflush_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	4605      	mov	r5, r0
 8003266:	460c      	mov	r4, r1
 8003268:	b913      	cbnz	r3, 8003270 <_fflush_r+0x10>
 800326a:	2500      	movs	r5, #0
 800326c:	4628      	mov	r0, r5
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	b118      	cbz	r0, 800327a <_fflush_r+0x1a>
 8003272:	6a03      	ldr	r3, [r0, #32]
 8003274:	b90b      	cbnz	r3, 800327a <_fflush_r+0x1a>
 8003276:	f000 f8bb 	bl	80033f0 <__sinit>
 800327a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f3      	beq.n	800326a <_fflush_r+0xa>
 8003282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003284:	07d0      	lsls	r0, r2, #31
 8003286:	d404      	bmi.n	8003292 <_fflush_r+0x32>
 8003288:	0599      	lsls	r1, r3, #22
 800328a:	d402      	bmi.n	8003292 <_fflush_r+0x32>
 800328c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800328e:	f000 f9e8 	bl	8003662 <__retarget_lock_acquire_recursive>
 8003292:	4628      	mov	r0, r5
 8003294:	4621      	mov	r1, r4
 8003296:	f7ff ff63 	bl	8003160 <__sflush_r>
 800329a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800329c:	4605      	mov	r5, r0
 800329e:	07da      	lsls	r2, r3, #31
 80032a0:	d4e4      	bmi.n	800326c <_fflush_r+0xc>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	059b      	lsls	r3, r3, #22
 80032a6:	d4e1      	bmi.n	800326c <_fflush_r+0xc>
 80032a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032aa:	f000 f9db 	bl	8003664 <__retarget_lock_release_recursive>
 80032ae:	e7dd      	b.n	800326c <_fflush_r+0xc>

080032b0 <fflush>:
 80032b0:	4601      	mov	r1, r0
 80032b2:	b920      	cbnz	r0, 80032be <fflush+0xe>
 80032b4:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <fflush+0x18>)
 80032b6:	4905      	ldr	r1, [pc, #20]	@ (80032cc <fflush+0x1c>)
 80032b8:	4805      	ldr	r0, [pc, #20]	@ (80032d0 <fflush+0x20>)
 80032ba:	f000 b8b1 	b.w	8003420 <_fwalk_sglue>
 80032be:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <fflush+0x24>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f7ff bfcd 	b.w	8003260 <_fflush_r>
 80032c6:	bf00      	nop
 80032c8:	20000014 	.word	0x20000014
 80032cc:	08003261 	.word	0x08003261
 80032d0:	20000024 	.word	0x20000024
 80032d4:	20000020 	.word	0x20000020

080032d8 <std>:
 80032d8:	2300      	movs	r3, #0
 80032da:	b510      	push	{r4, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	e9c0 3300 	strd	r3, r3, [r0]
 80032e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032e6:	6083      	str	r3, [r0, #8]
 80032e8:	8181      	strh	r1, [r0, #12]
 80032ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80032ec:	81c2      	strh	r2, [r0, #14]
 80032ee:	6183      	str	r3, [r0, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	305c      	adds	r0, #92	@ 0x5c
 80032f6:	f000 f93a 	bl	800356e <memset>
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <std+0x58>)
 80032fc:	6224      	str	r4, [r4, #32]
 80032fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <std+0x5c>)
 8003302:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <std+0x60>)
 8003306:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <std+0x64>)
 800330a:	6323      	str	r3, [r4, #48]	@ 0x30
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <std+0x68>)
 800330e:	429c      	cmp	r4, r3
 8003310:	d006      	beq.n	8003320 <std+0x48>
 8003312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003316:	4294      	cmp	r4, r2
 8003318:	d002      	beq.n	8003320 <std+0x48>
 800331a:	33d0      	adds	r3, #208	@ 0xd0
 800331c:	429c      	cmp	r4, r3
 800331e:	d105      	bne.n	800332c <std+0x54>
 8003320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003328:	f000 b99a 	b.w	8003660 <__retarget_lock_init_recursive>
 800332c:	bd10      	pop	{r4, pc}
 800332e:	bf00      	nop
 8003330:	080034e9 	.word	0x080034e9
 8003334:	0800350b 	.word	0x0800350b
 8003338:	08003543 	.word	0x08003543
 800333c:	08003567 	.word	0x08003567
 8003340:	200001f0 	.word	0x200001f0

08003344 <stdio_exit_handler>:
 8003344:	4a02      	ldr	r2, [pc, #8]	@ (8003350 <stdio_exit_handler+0xc>)
 8003346:	4903      	ldr	r1, [pc, #12]	@ (8003354 <stdio_exit_handler+0x10>)
 8003348:	4803      	ldr	r0, [pc, #12]	@ (8003358 <stdio_exit_handler+0x14>)
 800334a:	f000 b869 	b.w	8003420 <_fwalk_sglue>
 800334e:	bf00      	nop
 8003350:	20000014 	.word	0x20000014
 8003354:	08003261 	.word	0x08003261
 8003358:	20000024 	.word	0x20000024

0800335c <cleanup_stdio>:
 800335c:	6841      	ldr	r1, [r0, #4]
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <cleanup_stdio+0x34>)
 8003360:	b510      	push	{r4, lr}
 8003362:	4299      	cmp	r1, r3
 8003364:	4604      	mov	r4, r0
 8003366:	d001      	beq.n	800336c <cleanup_stdio+0x10>
 8003368:	f7ff ff7a 	bl	8003260 <_fflush_r>
 800336c:	68a1      	ldr	r1, [r4, #8]
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <cleanup_stdio+0x38>)
 8003370:	4299      	cmp	r1, r3
 8003372:	d002      	beq.n	800337a <cleanup_stdio+0x1e>
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ff73 	bl	8003260 <_fflush_r>
 800337a:	68e1      	ldr	r1, [r4, #12]
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <cleanup_stdio+0x3c>)
 800337e:	4299      	cmp	r1, r3
 8003380:	d004      	beq.n	800338c <cleanup_stdio+0x30>
 8003382:	4620      	mov	r0, r4
 8003384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003388:	f7ff bf6a 	b.w	8003260 <_fflush_r>
 800338c:	bd10      	pop	{r4, pc}
 800338e:	bf00      	nop
 8003390:	200001f0 	.word	0x200001f0
 8003394:	20000258 	.word	0x20000258
 8003398:	200002c0 	.word	0x200002c0

0800339c <global_stdio_init.part.0>:
 800339c:	b510      	push	{r4, lr}
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <global_stdio_init.part.0+0x30>)
 80033a0:	4c0b      	ldr	r4, [pc, #44]	@ (80033d0 <global_stdio_init.part.0+0x34>)
 80033a2:	4a0c      	ldr	r2, [pc, #48]	@ (80033d4 <global_stdio_init.part.0+0x38>)
 80033a4:	4620      	mov	r0, r4
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	2104      	movs	r1, #4
 80033aa:	2200      	movs	r2, #0
 80033ac:	f7ff ff94 	bl	80032d8 <std>
 80033b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033b4:	2201      	movs	r2, #1
 80033b6:	2109      	movs	r1, #9
 80033b8:	f7ff ff8e 	bl	80032d8 <std>
 80033bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033c0:	2202      	movs	r2, #2
 80033c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c6:	2112      	movs	r1, #18
 80033c8:	f7ff bf86 	b.w	80032d8 <std>
 80033cc:	20000328 	.word	0x20000328
 80033d0:	200001f0 	.word	0x200001f0
 80033d4:	08003345 	.word	0x08003345

080033d8 <__sfp_lock_acquire>:
 80033d8:	4801      	ldr	r0, [pc, #4]	@ (80033e0 <__sfp_lock_acquire+0x8>)
 80033da:	f000 b942 	b.w	8003662 <__retarget_lock_acquire_recursive>
 80033de:	bf00      	nop
 80033e0:	20000331 	.word	0x20000331

080033e4 <__sfp_lock_release>:
 80033e4:	4801      	ldr	r0, [pc, #4]	@ (80033ec <__sfp_lock_release+0x8>)
 80033e6:	f000 b93d 	b.w	8003664 <__retarget_lock_release_recursive>
 80033ea:	bf00      	nop
 80033ec:	20000331 	.word	0x20000331

080033f0 <__sinit>:
 80033f0:	b510      	push	{r4, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	f7ff fff0 	bl	80033d8 <__sfp_lock_acquire>
 80033f8:	6a23      	ldr	r3, [r4, #32]
 80033fa:	b11b      	cbz	r3, 8003404 <__sinit+0x14>
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003400:	f7ff bff0 	b.w	80033e4 <__sfp_lock_release>
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__sinit+0x28>)
 8003406:	6223      	str	r3, [r4, #32]
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__sinit+0x2c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f5      	bne.n	80033fc <__sinit+0xc>
 8003410:	f7ff ffc4 	bl	800339c <global_stdio_init.part.0>
 8003414:	e7f2      	b.n	80033fc <__sinit+0xc>
 8003416:	bf00      	nop
 8003418:	0800335d 	.word	0x0800335d
 800341c:	20000328 	.word	0x20000328

08003420 <_fwalk_sglue>:
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003424:	4607      	mov	r7, r0
 8003426:	4688      	mov	r8, r1
 8003428:	4614      	mov	r4, r2
 800342a:	2600      	movs	r6, #0
 800342c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003430:	f1b9 0901 	subs.w	r9, r9, #1
 8003434:	d505      	bpl.n	8003442 <_fwalk_sglue+0x22>
 8003436:	6824      	ldr	r4, [r4, #0]
 8003438:	2c00      	cmp	r4, #0
 800343a:	d1f7      	bne.n	800342c <_fwalk_sglue+0xc>
 800343c:	4630      	mov	r0, r6
 800343e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003442:	89ab      	ldrh	r3, [r5, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d907      	bls.n	8003458 <_fwalk_sglue+0x38>
 8003448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800344c:	3301      	adds	r3, #1
 800344e:	d003      	beq.n	8003458 <_fwalk_sglue+0x38>
 8003450:	4629      	mov	r1, r5
 8003452:	4638      	mov	r0, r7
 8003454:	47c0      	blx	r8
 8003456:	4306      	orrs	r6, r0
 8003458:	3568      	adds	r5, #104	@ 0x68
 800345a:	e7e9      	b.n	8003430 <_fwalk_sglue+0x10>

0800345c <iprintf>:
 800345c:	b40f      	push	{r0, r1, r2, r3}
 800345e:	b507      	push	{r0, r1, r2, lr}
 8003460:	4906      	ldr	r1, [pc, #24]	@ (800347c <iprintf+0x20>)
 8003462:	ab04      	add	r3, sp, #16
 8003464:	6808      	ldr	r0, [r1, #0]
 8003466:	f853 2b04 	ldr.w	r2, [r3], #4
 800346a:	6881      	ldr	r1, [r0, #8]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	f000 fb71 	bl	8003b54 <_vfiprintf_r>
 8003472:	b003      	add	sp, #12
 8003474:	f85d eb04 	ldr.w	lr, [sp], #4
 8003478:	b004      	add	sp, #16
 800347a:	4770      	bx	lr
 800347c:	20000020 	.word	0x20000020

08003480 <sniprintf>:
 8003480:	b40c      	push	{r2, r3}
 8003482:	b530      	push	{r4, r5, lr}
 8003484:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <sniprintf+0x64>)
 8003486:	1e0c      	subs	r4, r1, #0
 8003488:	681d      	ldr	r5, [r3, #0]
 800348a:	b09d      	sub	sp, #116	@ 0x74
 800348c:	da08      	bge.n	80034a0 <sniprintf+0x20>
 800348e:	238b      	movs	r3, #139	@ 0x8b
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	b01d      	add	sp, #116	@ 0x74
 8003498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800349c:	b002      	add	sp, #8
 800349e:	4770      	bx	lr
 80034a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80034a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80034a8:	bf0c      	ite	eq
 80034aa:	4623      	moveq	r3, r4
 80034ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	9307      	str	r3, [sp, #28]
 80034b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034b8:	9002      	str	r0, [sp, #8]
 80034ba:	9006      	str	r0, [sp, #24]
 80034bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80034c0:	4628      	mov	r0, r5
 80034c2:	ab21      	add	r3, sp, #132	@ 0x84
 80034c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80034c6:	a902      	add	r1, sp, #8
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	f000 fa1f 	bl	800390c <_svfiprintf_r>
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	bfbc      	itt	lt
 80034d2:	238b      	movlt	r3, #139	@ 0x8b
 80034d4:	602b      	strlt	r3, [r5, #0]
 80034d6:	2c00      	cmp	r4, #0
 80034d8:	d0dd      	beq.n	8003496 <sniprintf+0x16>
 80034da:	2200      	movs	r2, #0
 80034dc:	9b02      	ldr	r3, [sp, #8]
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e7d9      	b.n	8003496 <sniprintf+0x16>
 80034e2:	bf00      	nop
 80034e4:	20000020 	.word	0x20000020

080034e8 <__sread>:
 80034e8:	b510      	push	{r4, lr}
 80034ea:	460c      	mov	r4, r1
 80034ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f0:	f000 f868 	bl	80035c4 <_read_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	bfab      	itete	ge
 80034f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034fa:	89a3      	ldrhlt	r3, [r4, #12]
 80034fc:	181b      	addge	r3, r3, r0
 80034fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003502:	bfac      	ite	ge
 8003504:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003506:	81a3      	strhlt	r3, [r4, #12]
 8003508:	bd10      	pop	{r4, pc}

0800350a <__swrite>:
 800350a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350e:	461f      	mov	r7, r3
 8003510:	898b      	ldrh	r3, [r1, #12]
 8003512:	4605      	mov	r5, r0
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	460c      	mov	r4, r1
 8003518:	4616      	mov	r6, r2
 800351a:	d505      	bpl.n	8003528 <__swrite+0x1e>
 800351c:	2302      	movs	r3, #2
 800351e:	2200      	movs	r2, #0
 8003520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003524:	f000 f83c 	bl	80035a0 <_lseek_r>
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	4632      	mov	r2, r6
 800352c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	4628      	mov	r0, r5
 8003534:	463b      	mov	r3, r7
 8003536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800353a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800353e:	f000 b853 	b.w	80035e8 <_write_r>

08003542 <__sseek>:
 8003542:	b510      	push	{r4, lr}
 8003544:	460c      	mov	r4, r1
 8003546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354a:	f000 f829 	bl	80035a0 <_lseek_r>
 800354e:	1c43      	adds	r3, r0, #1
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	bf15      	itete	ne
 8003554:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003556:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800355a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800355e:	81a3      	strheq	r3, [r4, #12]
 8003560:	bf18      	it	ne
 8003562:	81a3      	strhne	r3, [r4, #12]
 8003564:	bd10      	pop	{r4, pc}

08003566 <__sclose>:
 8003566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356a:	f000 b809 	b.w	8003580 <_close_r>

0800356e <memset>:
 800356e:	4603      	mov	r3, r0
 8003570:	4402      	add	r2, r0
 8003572:	4293      	cmp	r3, r2
 8003574:	d100      	bne.n	8003578 <memset+0xa>
 8003576:	4770      	bx	lr
 8003578:	f803 1b01 	strb.w	r1, [r3], #1
 800357c:	e7f9      	b.n	8003572 <memset+0x4>
	...

08003580 <_close_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	2300      	movs	r3, #0
 8003584:	4d05      	ldr	r5, [pc, #20]	@ (800359c <_close_r+0x1c>)
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	602b      	str	r3, [r5, #0]
 800358c:	f7ff fc24 	bl	8002dd8 <_close>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_close_r+0x1a>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_close_r+0x1a>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	2000032c 	.word	0x2000032c

080035a0 <_lseek_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	2200      	movs	r2, #0
 80035aa:	4d05      	ldr	r5, [pc, #20]	@ (80035c0 <_lseek_r+0x20>)
 80035ac:	602a      	str	r2, [r5, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f7ff fbd3 	bl	8002d5a <_lseek>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_lseek_r+0x1e>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_lseek_r+0x1e>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	2000032c 	.word	0x2000032c

080035c4 <_read_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	2200      	movs	r2, #0
 80035ce:	4d05      	ldr	r5, [pc, #20]	@ (80035e4 <_read_r+0x20>)
 80035d0:	602a      	str	r2, [r5, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7ff fb6b 	bl	8002cae <_read>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_read_r+0x1e>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_read_r+0x1e>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	2000032c 	.word	0x2000032c

080035e8 <_write_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	2200      	movs	r2, #0
 80035f2:	4d05      	ldr	r5, [pc, #20]	@ (8003608 <_write_r+0x20>)
 80035f4:	602a      	str	r2, [r5, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f7ff fbc1 	bl	8002d7e <_write>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_write_r+0x1e>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	b103      	cbz	r3, 8003606 <_write_r+0x1e>
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	2000032c 	.word	0x2000032c

0800360c <__errno>:
 800360c:	4b01      	ldr	r3, [pc, #4]	@ (8003614 <__errno+0x8>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000020 	.word	0x20000020

08003618 <__libc_init_array>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	2600      	movs	r6, #0
 800361c:	4d0c      	ldr	r5, [pc, #48]	@ (8003650 <__libc_init_array+0x38>)
 800361e:	4c0d      	ldr	r4, [pc, #52]	@ (8003654 <__libc_init_array+0x3c>)
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	42a6      	cmp	r6, r4
 8003626:	d109      	bne.n	800363c <__libc_init_array+0x24>
 8003628:	f000 fed2 	bl	80043d0 <_init>
 800362c:	2600      	movs	r6, #0
 800362e:	4d0a      	ldr	r5, [pc, #40]	@ (8003658 <__libc_init_array+0x40>)
 8003630:	4c0a      	ldr	r4, [pc, #40]	@ (800365c <__libc_init_array+0x44>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	42a6      	cmp	r6, r4
 8003638:	d105      	bne.n	8003646 <__libc_init_array+0x2e>
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003640:	4798      	blx	r3
 8003642:	3601      	adds	r6, #1
 8003644:	e7ee      	b.n	8003624 <__libc_init_array+0xc>
 8003646:	f855 3b04 	ldr.w	r3, [r5], #4
 800364a:	4798      	blx	r3
 800364c:	3601      	adds	r6, #1
 800364e:	e7f2      	b.n	8003636 <__libc_init_array+0x1e>
 8003650:	080044b8 	.word	0x080044b8
 8003654:	080044b8 	.word	0x080044b8
 8003658:	080044b8 	.word	0x080044b8
 800365c:	080044bc 	.word	0x080044bc

08003660 <__retarget_lock_init_recursive>:
 8003660:	4770      	bx	lr

08003662 <__retarget_lock_acquire_recursive>:
 8003662:	4770      	bx	lr

08003664 <__retarget_lock_release_recursive>:
 8003664:	4770      	bx	lr
	...

08003668 <_free_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4605      	mov	r5, r0
 800366c:	2900      	cmp	r1, #0
 800366e:	d040      	beq.n	80036f2 <_free_r+0x8a>
 8003670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003674:	1f0c      	subs	r4, r1, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfb8      	it	lt
 800367a:	18e4      	addlt	r4, r4, r3
 800367c:	f000 f8de 	bl	800383c <__malloc_lock>
 8003680:	4a1c      	ldr	r2, [pc, #112]	@ (80036f4 <_free_r+0x8c>)
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	b933      	cbnz	r3, 8003694 <_free_r+0x2c>
 8003686:	6063      	str	r3, [r4, #4]
 8003688:	6014      	str	r4, [r2, #0]
 800368a:	4628      	mov	r0, r5
 800368c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003690:	f000 b8da 	b.w	8003848 <__malloc_unlock>
 8003694:	42a3      	cmp	r3, r4
 8003696:	d908      	bls.n	80036aa <_free_r+0x42>
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	1821      	adds	r1, r4, r0
 800369c:	428b      	cmp	r3, r1
 800369e:	bf01      	itttt	eq
 80036a0:	6819      	ldreq	r1, [r3, #0]
 80036a2:	685b      	ldreq	r3, [r3, #4]
 80036a4:	1809      	addeq	r1, r1, r0
 80036a6:	6021      	streq	r1, [r4, #0]
 80036a8:	e7ed      	b.n	8003686 <_free_r+0x1e>
 80036aa:	461a      	mov	r2, r3
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b10b      	cbz	r3, 80036b4 <_free_r+0x4c>
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d9fa      	bls.n	80036aa <_free_r+0x42>
 80036b4:	6811      	ldr	r1, [r2, #0]
 80036b6:	1850      	adds	r0, r2, r1
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d10b      	bne.n	80036d4 <_free_r+0x6c>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	4401      	add	r1, r0
 80036c0:	1850      	adds	r0, r2, r1
 80036c2:	4283      	cmp	r3, r0
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	d1e0      	bne.n	800368a <_free_r+0x22>
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4408      	add	r0, r1
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	6053      	str	r3, [r2, #4]
 80036d2:	e7da      	b.n	800368a <_free_r+0x22>
 80036d4:	d902      	bls.n	80036dc <_free_r+0x74>
 80036d6:	230c      	movs	r3, #12
 80036d8:	602b      	str	r3, [r5, #0]
 80036da:	e7d6      	b.n	800368a <_free_r+0x22>
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	1821      	adds	r1, r4, r0
 80036e0:	428b      	cmp	r3, r1
 80036e2:	bf01      	itttt	eq
 80036e4:	6819      	ldreq	r1, [r3, #0]
 80036e6:	685b      	ldreq	r3, [r3, #4]
 80036e8:	1809      	addeq	r1, r1, r0
 80036ea:	6021      	streq	r1, [r4, #0]
 80036ec:	6063      	str	r3, [r4, #4]
 80036ee:	6054      	str	r4, [r2, #4]
 80036f0:	e7cb      	b.n	800368a <_free_r+0x22>
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000338 	.word	0x20000338

080036f8 <sbrk_aligned>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4e0f      	ldr	r6, [pc, #60]	@ (8003738 <sbrk_aligned+0x40>)
 80036fc:	460c      	mov	r4, r1
 80036fe:	6831      	ldr	r1, [r6, #0]
 8003700:	4605      	mov	r5, r0
 8003702:	b911      	cbnz	r1, 800370a <sbrk_aligned+0x12>
 8003704:	f000 fd7e 	bl	8004204 <_sbrk_r>
 8003708:	6030      	str	r0, [r6, #0]
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 fd79 	bl	8004204 <_sbrk_r>
 8003712:	1c43      	adds	r3, r0, #1
 8003714:	d103      	bne.n	800371e <sbrk_aligned+0x26>
 8003716:	f04f 34ff 	mov.w	r4, #4294967295
 800371a:	4620      	mov	r0, r4
 800371c:	bd70      	pop	{r4, r5, r6, pc}
 800371e:	1cc4      	adds	r4, r0, #3
 8003720:	f024 0403 	bic.w	r4, r4, #3
 8003724:	42a0      	cmp	r0, r4
 8003726:	d0f8      	beq.n	800371a <sbrk_aligned+0x22>
 8003728:	1a21      	subs	r1, r4, r0
 800372a:	4628      	mov	r0, r5
 800372c:	f000 fd6a 	bl	8004204 <_sbrk_r>
 8003730:	3001      	adds	r0, #1
 8003732:	d1f2      	bne.n	800371a <sbrk_aligned+0x22>
 8003734:	e7ef      	b.n	8003716 <sbrk_aligned+0x1e>
 8003736:	bf00      	nop
 8003738:	20000334 	.word	0x20000334

0800373c <_malloc_r>:
 800373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003740:	1ccd      	adds	r5, r1, #3
 8003742:	f025 0503 	bic.w	r5, r5, #3
 8003746:	3508      	adds	r5, #8
 8003748:	2d0c      	cmp	r5, #12
 800374a:	bf38      	it	cc
 800374c:	250c      	movcc	r5, #12
 800374e:	2d00      	cmp	r5, #0
 8003750:	4606      	mov	r6, r0
 8003752:	db01      	blt.n	8003758 <_malloc_r+0x1c>
 8003754:	42a9      	cmp	r1, r5
 8003756:	d904      	bls.n	8003762 <_malloc_r+0x26>
 8003758:	230c      	movs	r3, #12
 800375a:	6033      	str	r3, [r6, #0]
 800375c:	2000      	movs	r0, #0
 800375e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003838 <_malloc_r+0xfc>
 8003766:	f000 f869 	bl	800383c <__malloc_lock>
 800376a:	f8d8 3000 	ldr.w	r3, [r8]
 800376e:	461c      	mov	r4, r3
 8003770:	bb44      	cbnz	r4, 80037c4 <_malloc_r+0x88>
 8003772:	4629      	mov	r1, r5
 8003774:	4630      	mov	r0, r6
 8003776:	f7ff ffbf 	bl	80036f8 <sbrk_aligned>
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	4604      	mov	r4, r0
 800377e:	d158      	bne.n	8003832 <_malloc_r+0xf6>
 8003780:	f8d8 4000 	ldr.w	r4, [r8]
 8003784:	4627      	mov	r7, r4
 8003786:	2f00      	cmp	r7, #0
 8003788:	d143      	bne.n	8003812 <_malloc_r+0xd6>
 800378a:	2c00      	cmp	r4, #0
 800378c:	d04b      	beq.n	8003826 <_malloc_r+0xea>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4639      	mov	r1, r7
 8003792:	4630      	mov	r0, r6
 8003794:	eb04 0903 	add.w	r9, r4, r3
 8003798:	f000 fd34 	bl	8004204 <_sbrk_r>
 800379c:	4581      	cmp	r9, r0
 800379e:	d142      	bne.n	8003826 <_malloc_r+0xea>
 80037a0:	6821      	ldr	r1, [r4, #0]
 80037a2:	4630      	mov	r0, r6
 80037a4:	1a6d      	subs	r5, r5, r1
 80037a6:	4629      	mov	r1, r5
 80037a8:	f7ff ffa6 	bl	80036f8 <sbrk_aligned>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d03a      	beq.n	8003826 <_malloc_r+0xea>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	442b      	add	r3, r5
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	f8d8 3000 	ldr.w	r3, [r8]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	bb62      	cbnz	r2, 8003818 <_malloc_r+0xdc>
 80037be:	f8c8 7000 	str.w	r7, [r8]
 80037c2:	e00f      	b.n	80037e4 <_malloc_r+0xa8>
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	1b52      	subs	r2, r2, r5
 80037c8:	d420      	bmi.n	800380c <_malloc_r+0xd0>
 80037ca:	2a0b      	cmp	r2, #11
 80037cc:	d917      	bls.n	80037fe <_malloc_r+0xc2>
 80037ce:	1961      	adds	r1, r4, r5
 80037d0:	42a3      	cmp	r3, r4
 80037d2:	6025      	str	r5, [r4, #0]
 80037d4:	bf18      	it	ne
 80037d6:	6059      	strne	r1, [r3, #4]
 80037d8:	6863      	ldr	r3, [r4, #4]
 80037da:	bf08      	it	eq
 80037dc:	f8c8 1000 	streq.w	r1, [r8]
 80037e0:	5162      	str	r2, [r4, r5]
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 f82f 	bl	8003848 <__malloc_unlock>
 80037ea:	f104 000b 	add.w	r0, r4, #11
 80037ee:	1d23      	adds	r3, r4, #4
 80037f0:	f020 0007 	bic.w	r0, r0, #7
 80037f4:	1ac2      	subs	r2, r0, r3
 80037f6:	bf1c      	itt	ne
 80037f8:	1a1b      	subne	r3, r3, r0
 80037fa:	50a3      	strne	r3, [r4, r2]
 80037fc:	e7af      	b.n	800375e <_malloc_r+0x22>
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	bf0c      	ite	eq
 8003804:	f8c8 2000 	streq.w	r2, [r8]
 8003808:	605a      	strne	r2, [r3, #4]
 800380a:	e7eb      	b.n	80037e4 <_malloc_r+0xa8>
 800380c:	4623      	mov	r3, r4
 800380e:	6864      	ldr	r4, [r4, #4]
 8003810:	e7ae      	b.n	8003770 <_malloc_r+0x34>
 8003812:	463c      	mov	r4, r7
 8003814:	687f      	ldr	r7, [r7, #4]
 8003816:	e7b6      	b.n	8003786 <_malloc_r+0x4a>
 8003818:	461a      	mov	r2, r3
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	42a3      	cmp	r3, r4
 800381e:	d1fb      	bne.n	8003818 <_malloc_r+0xdc>
 8003820:	2300      	movs	r3, #0
 8003822:	6053      	str	r3, [r2, #4]
 8003824:	e7de      	b.n	80037e4 <_malloc_r+0xa8>
 8003826:	230c      	movs	r3, #12
 8003828:	4630      	mov	r0, r6
 800382a:	6033      	str	r3, [r6, #0]
 800382c:	f000 f80c 	bl	8003848 <__malloc_unlock>
 8003830:	e794      	b.n	800375c <_malloc_r+0x20>
 8003832:	6005      	str	r5, [r0, #0]
 8003834:	e7d6      	b.n	80037e4 <_malloc_r+0xa8>
 8003836:	bf00      	nop
 8003838:	20000338 	.word	0x20000338

0800383c <__malloc_lock>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__malloc_lock+0x8>)
 800383e:	f7ff bf10 	b.w	8003662 <__retarget_lock_acquire_recursive>
 8003842:	bf00      	nop
 8003844:	20000330 	.word	0x20000330

08003848 <__malloc_unlock>:
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <__malloc_unlock+0x8>)
 800384a:	f7ff bf0b 	b.w	8003664 <__retarget_lock_release_recursive>
 800384e:	bf00      	nop
 8003850:	20000330 	.word	0x20000330

08003854 <__ssputs_r>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	461f      	mov	r7, r3
 800385a:	688e      	ldr	r6, [r1, #8]
 800385c:	4682      	mov	sl, r0
 800385e:	42be      	cmp	r6, r7
 8003860:	460c      	mov	r4, r1
 8003862:	4690      	mov	r8, r2
 8003864:	680b      	ldr	r3, [r1, #0]
 8003866:	d82d      	bhi.n	80038c4 <__ssputs_r+0x70>
 8003868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800386c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003870:	d026      	beq.n	80038c0 <__ssputs_r+0x6c>
 8003872:	6965      	ldr	r5, [r4, #20]
 8003874:	6909      	ldr	r1, [r1, #16]
 8003876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800387a:	eba3 0901 	sub.w	r9, r3, r1
 800387e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003882:	1c7b      	adds	r3, r7, #1
 8003884:	444b      	add	r3, r9
 8003886:	106d      	asrs	r5, r5, #1
 8003888:	429d      	cmp	r5, r3
 800388a:	bf38      	it	cc
 800388c:	461d      	movcc	r5, r3
 800388e:	0553      	lsls	r3, r2, #21
 8003890:	d527      	bpl.n	80038e2 <__ssputs_r+0x8e>
 8003892:	4629      	mov	r1, r5
 8003894:	f7ff ff52 	bl	800373c <_malloc_r>
 8003898:	4606      	mov	r6, r0
 800389a:	b360      	cbz	r0, 80038f6 <__ssputs_r+0xa2>
 800389c:	464a      	mov	r2, r9
 800389e:	6921      	ldr	r1, [r4, #16]
 80038a0:	f000 fcce 	bl	8004240 <memcpy>
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ae:	81a3      	strh	r3, [r4, #12]
 80038b0:	6126      	str	r6, [r4, #16]
 80038b2:	444e      	add	r6, r9
 80038b4:	6026      	str	r6, [r4, #0]
 80038b6:	463e      	mov	r6, r7
 80038b8:	6165      	str	r5, [r4, #20]
 80038ba:	eba5 0509 	sub.w	r5, r5, r9
 80038be:	60a5      	str	r5, [r4, #8]
 80038c0:	42be      	cmp	r6, r7
 80038c2:	d900      	bls.n	80038c6 <__ssputs_r+0x72>
 80038c4:	463e      	mov	r6, r7
 80038c6:	4632      	mov	r2, r6
 80038c8:	4641      	mov	r1, r8
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	f000 fc80 	bl	80041d0 <memmove>
 80038d0:	2000      	movs	r0, #0
 80038d2:	68a3      	ldr	r3, [r4, #8]
 80038d4:	1b9b      	subs	r3, r3, r6
 80038d6:	60a3      	str	r3, [r4, #8]
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	4433      	add	r3, r6
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e2:	462a      	mov	r2, r5
 80038e4:	f000 fcba 	bl	800425c <_realloc_r>
 80038e8:	4606      	mov	r6, r0
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d1e0      	bne.n	80038b0 <__ssputs_r+0x5c>
 80038ee:	4650      	mov	r0, sl
 80038f0:	6921      	ldr	r1, [r4, #16]
 80038f2:	f7ff feb9 	bl	8003668 <_free_r>
 80038f6:	230c      	movs	r3, #12
 80038f8:	f8ca 3000 	str.w	r3, [sl]
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	e7e9      	b.n	80038de <__ssputs_r+0x8a>
	...

0800390c <_svfiprintf_r>:
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	4698      	mov	r8, r3
 8003912:	898b      	ldrh	r3, [r1, #12]
 8003914:	4607      	mov	r7, r0
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	460d      	mov	r5, r1
 800391a:	4614      	mov	r4, r2
 800391c:	b09d      	sub	sp, #116	@ 0x74
 800391e:	d510      	bpl.n	8003942 <_svfiprintf_r+0x36>
 8003920:	690b      	ldr	r3, [r1, #16]
 8003922:	b973      	cbnz	r3, 8003942 <_svfiprintf_r+0x36>
 8003924:	2140      	movs	r1, #64	@ 0x40
 8003926:	f7ff ff09 	bl	800373c <_malloc_r>
 800392a:	6028      	str	r0, [r5, #0]
 800392c:	6128      	str	r0, [r5, #16]
 800392e:	b930      	cbnz	r0, 800393e <_svfiprintf_r+0x32>
 8003930:	230c      	movs	r3, #12
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	b01d      	add	sp, #116	@ 0x74
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393e:	2340      	movs	r3, #64	@ 0x40
 8003940:	616b      	str	r3, [r5, #20]
 8003942:	2300      	movs	r3, #0
 8003944:	9309      	str	r3, [sp, #36]	@ 0x24
 8003946:	2320      	movs	r3, #32
 8003948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800394c:	2330      	movs	r3, #48	@ 0x30
 800394e:	f04f 0901 	mov.w	r9, #1
 8003952:	f8cd 800c 	str.w	r8, [sp, #12]
 8003956:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003af0 <_svfiprintf_r+0x1e4>
 800395a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800395e:	4623      	mov	r3, r4
 8003960:	469a      	mov	sl, r3
 8003962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003966:	b10a      	cbz	r2, 800396c <_svfiprintf_r+0x60>
 8003968:	2a25      	cmp	r2, #37	@ 0x25
 800396a:	d1f9      	bne.n	8003960 <_svfiprintf_r+0x54>
 800396c:	ebba 0b04 	subs.w	fp, sl, r4
 8003970:	d00b      	beq.n	800398a <_svfiprintf_r+0x7e>
 8003972:	465b      	mov	r3, fp
 8003974:	4622      	mov	r2, r4
 8003976:	4629      	mov	r1, r5
 8003978:	4638      	mov	r0, r7
 800397a:	f7ff ff6b 	bl	8003854 <__ssputs_r>
 800397e:	3001      	adds	r0, #1
 8003980:	f000 80a7 	beq.w	8003ad2 <_svfiprintf_r+0x1c6>
 8003984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003986:	445a      	add	r2, fp
 8003988:	9209      	str	r2, [sp, #36]	@ 0x24
 800398a:	f89a 3000 	ldrb.w	r3, [sl]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 809f 	beq.w	8003ad2 <_svfiprintf_r+0x1c6>
 8003994:	2300      	movs	r3, #0
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800399e:	f10a 0a01 	add.w	sl, sl, #1
 80039a2:	9304      	str	r3, [sp, #16]
 80039a4:	9307      	str	r3, [sp, #28]
 80039a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80039ac:	4654      	mov	r4, sl
 80039ae:	2205      	movs	r2, #5
 80039b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b4:	484e      	ldr	r0, [pc, #312]	@ (8003af0 <_svfiprintf_r+0x1e4>)
 80039b6:	f000 fc35 	bl	8004224 <memchr>
 80039ba:	9a04      	ldr	r2, [sp, #16]
 80039bc:	b9d8      	cbnz	r0, 80039f6 <_svfiprintf_r+0xea>
 80039be:	06d0      	lsls	r0, r2, #27
 80039c0:	bf44      	itt	mi
 80039c2:	2320      	movmi	r3, #32
 80039c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c8:	0711      	lsls	r1, r2, #28
 80039ca:	bf44      	itt	mi
 80039cc:	232b      	movmi	r3, #43	@ 0x2b
 80039ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039d2:	f89a 3000 	ldrb.w	r3, [sl]
 80039d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80039d8:	d015      	beq.n	8003a06 <_svfiprintf_r+0xfa>
 80039da:	4654      	mov	r4, sl
 80039dc:	2000      	movs	r0, #0
 80039de:	f04f 0c0a 	mov.w	ip, #10
 80039e2:	9a07      	ldr	r2, [sp, #28]
 80039e4:	4621      	mov	r1, r4
 80039e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ea:	3b30      	subs	r3, #48	@ 0x30
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d94b      	bls.n	8003a88 <_svfiprintf_r+0x17c>
 80039f0:	b1b0      	cbz	r0, 8003a20 <_svfiprintf_r+0x114>
 80039f2:	9207      	str	r2, [sp, #28]
 80039f4:	e014      	b.n	8003a20 <_svfiprintf_r+0x114>
 80039f6:	eba0 0308 	sub.w	r3, r0, r8
 80039fa:	fa09 f303 	lsl.w	r3, r9, r3
 80039fe:	4313      	orrs	r3, r2
 8003a00:	46a2      	mov	sl, r4
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	e7d2      	b.n	80039ac <_svfiprintf_r+0xa0>
 8003a06:	9b03      	ldr	r3, [sp, #12]
 8003a08:	1d19      	adds	r1, r3, #4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	9103      	str	r1, [sp, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bfbb      	ittet	lt
 8003a12:	425b      	neglt	r3, r3
 8003a14:	f042 0202 	orrlt.w	r2, r2, #2
 8003a18:	9307      	strge	r3, [sp, #28]
 8003a1a:	9307      	strlt	r3, [sp, #28]
 8003a1c:	bfb8      	it	lt
 8003a1e:	9204      	strlt	r2, [sp, #16]
 8003a20:	7823      	ldrb	r3, [r4, #0]
 8003a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a24:	d10a      	bne.n	8003a3c <_svfiprintf_r+0x130>
 8003a26:	7863      	ldrb	r3, [r4, #1]
 8003a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2a:	d132      	bne.n	8003a92 <_svfiprintf_r+0x186>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	3402      	adds	r4, #2
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	9203      	str	r2, [sp, #12]
 8003a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a3a:	9305      	str	r3, [sp, #20]
 8003a3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003af4 <_svfiprintf_r+0x1e8>
 8003a40:	2203      	movs	r2, #3
 8003a42:	4650      	mov	r0, sl
 8003a44:	7821      	ldrb	r1, [r4, #0]
 8003a46:	f000 fbed 	bl	8004224 <memchr>
 8003a4a:	b138      	cbz	r0, 8003a5c <_svfiprintf_r+0x150>
 8003a4c:	2240      	movs	r2, #64	@ 0x40
 8003a4e:	9b04      	ldr	r3, [sp, #16]
 8003a50:	eba0 000a 	sub.w	r0, r0, sl
 8003a54:	4082      	lsls	r2, r0
 8003a56:	4313      	orrs	r3, r2
 8003a58:	3401      	adds	r4, #1
 8003a5a:	9304      	str	r3, [sp, #16]
 8003a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a60:	2206      	movs	r2, #6
 8003a62:	4825      	ldr	r0, [pc, #148]	@ (8003af8 <_svfiprintf_r+0x1ec>)
 8003a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a68:	f000 fbdc 	bl	8004224 <memchr>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d036      	beq.n	8003ade <_svfiprintf_r+0x1d2>
 8003a70:	4b22      	ldr	r3, [pc, #136]	@ (8003afc <_svfiprintf_r+0x1f0>)
 8003a72:	bb1b      	cbnz	r3, 8003abc <_svfiprintf_r+0x1b0>
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	3307      	adds	r3, #7
 8003a78:	f023 0307 	bic.w	r3, r3, #7
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	9303      	str	r3, [sp, #12]
 8003a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a82:	4433      	add	r3, r6
 8003a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a86:	e76a      	b.n	800395e <_svfiprintf_r+0x52>
 8003a88:	460c      	mov	r4, r1
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a90:	e7a8      	b.n	80039e4 <_svfiprintf_r+0xd8>
 8003a92:	2300      	movs	r3, #0
 8003a94:	f04f 0c0a 	mov.w	ip, #10
 8003a98:	4619      	mov	r1, r3
 8003a9a:	3401      	adds	r4, #1
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa4:	3a30      	subs	r2, #48	@ 0x30
 8003aa6:	2a09      	cmp	r2, #9
 8003aa8:	d903      	bls.n	8003ab2 <_svfiprintf_r+0x1a6>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0c6      	beq.n	8003a3c <_svfiprintf_r+0x130>
 8003aae:	9105      	str	r1, [sp, #20]
 8003ab0:	e7c4      	b.n	8003a3c <_svfiprintf_r+0x130>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aba:	e7f0      	b.n	8003a9e <_svfiprintf_r+0x192>
 8003abc:	ab03      	add	r3, sp, #12
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	462a      	mov	r2, r5
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <_svfiprintf_r+0x1f4>)
 8003ac6:	a904      	add	r1, sp, #16
 8003ac8:	f3af 8000 	nop.w
 8003acc:	1c42      	adds	r2, r0, #1
 8003ace:	4606      	mov	r6, r0
 8003ad0:	d1d6      	bne.n	8003a80 <_svfiprintf_r+0x174>
 8003ad2:	89ab      	ldrh	r3, [r5, #12]
 8003ad4:	065b      	lsls	r3, r3, #25
 8003ad6:	f53f af2d 	bmi.w	8003934 <_svfiprintf_r+0x28>
 8003ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003adc:	e72c      	b.n	8003938 <_svfiprintf_r+0x2c>
 8003ade:	ab03      	add	r3, sp, #12
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <_svfiprintf_r+0x1f4>)
 8003ae8:	a904      	add	r1, sp, #16
 8003aea:	f000 f9bd 	bl	8003e68 <_printf_i>
 8003aee:	e7ed      	b.n	8003acc <_svfiprintf_r+0x1c0>
 8003af0:	0800447a 	.word	0x0800447a
 8003af4:	08004480 	.word	0x08004480
 8003af8:	08004484 	.word	0x08004484
 8003afc:	00000000 	.word	0x00000000
 8003b00:	08003855 	.word	0x08003855

08003b04 <__sfputc_r>:
 8003b04:	6893      	ldr	r3, [r2, #8]
 8003b06:	b410      	push	{r4}
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	6093      	str	r3, [r2, #8]
 8003b0e:	da07      	bge.n	8003b20 <__sfputc_r+0x1c>
 8003b10:	6994      	ldr	r4, [r2, #24]
 8003b12:	42a3      	cmp	r3, r4
 8003b14:	db01      	blt.n	8003b1a <__sfputc_r+0x16>
 8003b16:	290a      	cmp	r1, #10
 8003b18:	d102      	bne.n	8003b20 <__sfputc_r+0x1c>
 8003b1a:	bc10      	pop	{r4}
 8003b1c:	f000 bac4 	b.w	80040a8 <__swbuf_r>
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	1c58      	adds	r0, r3, #1
 8003b24:	6010      	str	r0, [r2, #0]
 8003b26:	7019      	strb	r1, [r3, #0]
 8003b28:	4608      	mov	r0, r1
 8003b2a:	bc10      	pop	{r4}
 8003b2c:	4770      	bx	lr

08003b2e <__sfputs_r>:
 8003b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b30:	4606      	mov	r6, r0
 8003b32:	460f      	mov	r7, r1
 8003b34:	4614      	mov	r4, r2
 8003b36:	18d5      	adds	r5, r2, r3
 8003b38:	42ac      	cmp	r4, r5
 8003b3a:	d101      	bne.n	8003b40 <__sfputs_r+0x12>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e007      	b.n	8003b50 <__sfputs_r+0x22>
 8003b40:	463a      	mov	r2, r7
 8003b42:	4630      	mov	r0, r6
 8003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b48:	f7ff ffdc 	bl	8003b04 <__sfputc_r>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d1f3      	bne.n	8003b38 <__sfputs_r+0xa>
 8003b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b54 <_vfiprintf_r>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	460d      	mov	r5, r1
 8003b5a:	4614      	mov	r4, r2
 8003b5c:	4698      	mov	r8, r3
 8003b5e:	4606      	mov	r6, r0
 8003b60:	b09d      	sub	sp, #116	@ 0x74
 8003b62:	b118      	cbz	r0, 8003b6c <_vfiprintf_r+0x18>
 8003b64:	6a03      	ldr	r3, [r0, #32]
 8003b66:	b90b      	cbnz	r3, 8003b6c <_vfiprintf_r+0x18>
 8003b68:	f7ff fc42 	bl	80033f0 <__sinit>
 8003b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b6e:	07d9      	lsls	r1, r3, #31
 8003b70:	d405      	bmi.n	8003b7e <_vfiprintf_r+0x2a>
 8003b72:	89ab      	ldrh	r3, [r5, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d402      	bmi.n	8003b7e <_vfiprintf_r+0x2a>
 8003b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b7a:	f7ff fd72 	bl	8003662 <__retarget_lock_acquire_recursive>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	d501      	bpl.n	8003b88 <_vfiprintf_r+0x34>
 8003b84:	692b      	ldr	r3, [r5, #16]
 8003b86:	b99b      	cbnz	r3, 8003bb0 <_vfiprintf_r+0x5c>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 faca 	bl	8004124 <__swsetup_r>
 8003b90:	b170      	cbz	r0, 8003bb0 <_vfiprintf_r+0x5c>
 8003b92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b94:	07dc      	lsls	r4, r3, #31
 8003b96:	d504      	bpl.n	8003ba2 <_vfiprintf_r+0x4e>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	b01d      	add	sp, #116	@ 0x74
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	89ab      	ldrh	r3, [r5, #12]
 8003ba4:	0598      	lsls	r0, r3, #22
 8003ba6:	d4f7      	bmi.n	8003b98 <_vfiprintf_r+0x44>
 8003ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003baa:	f7ff fd5b 	bl	8003664 <__retarget_lock_release_recursive>
 8003bae:	e7f3      	b.n	8003b98 <_vfiprintf_r+0x44>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bba:	2330      	movs	r3, #48	@ 0x30
 8003bbc:	f04f 0901 	mov.w	r9, #1
 8003bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bc4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003d70 <_vfiprintf_r+0x21c>
 8003bc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bcc:	4623      	mov	r3, r4
 8003bce:	469a      	mov	sl, r3
 8003bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bd4:	b10a      	cbz	r2, 8003bda <_vfiprintf_r+0x86>
 8003bd6:	2a25      	cmp	r2, #37	@ 0x25
 8003bd8:	d1f9      	bne.n	8003bce <_vfiprintf_r+0x7a>
 8003bda:	ebba 0b04 	subs.w	fp, sl, r4
 8003bde:	d00b      	beq.n	8003bf8 <_vfiprintf_r+0xa4>
 8003be0:	465b      	mov	r3, fp
 8003be2:	4622      	mov	r2, r4
 8003be4:	4629      	mov	r1, r5
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffa1 	bl	8003b2e <__sfputs_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	f000 80a7 	beq.w	8003d40 <_vfiprintf_r+0x1ec>
 8003bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bf4:	445a      	add	r2, fp
 8003bf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 809f 	beq.w	8003d40 <_vfiprintf_r+0x1ec>
 8003c02:	2300      	movs	r3, #0
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c0c:	f10a 0a01 	add.w	sl, sl, #1
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	9307      	str	r3, [sp, #28]
 8003c14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c18:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c1a:	4654      	mov	r4, sl
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c22:	4853      	ldr	r0, [pc, #332]	@ (8003d70 <_vfiprintf_r+0x21c>)
 8003c24:	f000 fafe 	bl	8004224 <memchr>
 8003c28:	9a04      	ldr	r2, [sp, #16]
 8003c2a:	b9d8      	cbnz	r0, 8003c64 <_vfiprintf_r+0x110>
 8003c2c:	06d1      	lsls	r1, r2, #27
 8003c2e:	bf44      	itt	mi
 8003c30:	2320      	movmi	r3, #32
 8003c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c36:	0713      	lsls	r3, r2, #28
 8003c38:	bf44      	itt	mi
 8003c3a:	232b      	movmi	r3, #43	@ 0x2b
 8003c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c40:	f89a 3000 	ldrb.w	r3, [sl]
 8003c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c46:	d015      	beq.n	8003c74 <_vfiprintf_r+0x120>
 8003c48:	4654      	mov	r4, sl
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f04f 0c0a 	mov.w	ip, #10
 8003c50:	9a07      	ldr	r2, [sp, #28]
 8003c52:	4621      	mov	r1, r4
 8003c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c58:	3b30      	subs	r3, #48	@ 0x30
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d94b      	bls.n	8003cf6 <_vfiprintf_r+0x1a2>
 8003c5e:	b1b0      	cbz	r0, 8003c8e <_vfiprintf_r+0x13a>
 8003c60:	9207      	str	r2, [sp, #28]
 8003c62:	e014      	b.n	8003c8e <_vfiprintf_r+0x13a>
 8003c64:	eba0 0308 	sub.w	r3, r0, r8
 8003c68:	fa09 f303 	lsl.w	r3, r9, r3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	46a2      	mov	sl, r4
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	e7d2      	b.n	8003c1a <_vfiprintf_r+0xc6>
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	1d19      	adds	r1, r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	9103      	str	r1, [sp, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bfbb      	ittet	lt
 8003c80:	425b      	neglt	r3, r3
 8003c82:	f042 0202 	orrlt.w	r2, r2, #2
 8003c86:	9307      	strge	r3, [sp, #28]
 8003c88:	9307      	strlt	r3, [sp, #28]
 8003c8a:	bfb8      	it	lt
 8003c8c:	9204      	strlt	r2, [sp, #16]
 8003c8e:	7823      	ldrb	r3, [r4, #0]
 8003c90:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c92:	d10a      	bne.n	8003caa <_vfiprintf_r+0x156>
 8003c94:	7863      	ldrb	r3, [r4, #1]
 8003c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c98:	d132      	bne.n	8003d00 <_vfiprintf_r+0x1ac>
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	3402      	adds	r4, #2
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	9203      	str	r2, [sp, #12]
 8003ca4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ca8:	9305      	str	r3, [sp, #20]
 8003caa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003d74 <_vfiprintf_r+0x220>
 8003cae:	2203      	movs	r2, #3
 8003cb0:	4650      	mov	r0, sl
 8003cb2:	7821      	ldrb	r1, [r4, #0]
 8003cb4:	f000 fab6 	bl	8004224 <memchr>
 8003cb8:	b138      	cbz	r0, 8003cca <_vfiprintf_r+0x176>
 8003cba:	2240      	movs	r2, #64	@ 0x40
 8003cbc:	9b04      	ldr	r3, [sp, #16]
 8003cbe:	eba0 000a 	sub.w	r0, r0, sl
 8003cc2:	4082      	lsls	r2, r0
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	3401      	adds	r4, #1
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cce:	2206      	movs	r2, #6
 8003cd0:	4829      	ldr	r0, [pc, #164]	@ (8003d78 <_vfiprintf_r+0x224>)
 8003cd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cd6:	f000 faa5 	bl	8004224 <memchr>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d03f      	beq.n	8003d5e <_vfiprintf_r+0x20a>
 8003cde:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <_vfiprintf_r+0x228>)
 8003ce0:	bb1b      	cbnz	r3, 8003d2a <_vfiprintf_r+0x1d6>
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	3307      	adds	r3, #7
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	3308      	adds	r3, #8
 8003cec:	9303      	str	r3, [sp, #12]
 8003cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cf0:	443b      	add	r3, r7
 8003cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cf4:	e76a      	b.n	8003bcc <_vfiprintf_r+0x78>
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cfe:	e7a8      	b.n	8003c52 <_vfiprintf_r+0xfe>
 8003d00:	2300      	movs	r3, #0
 8003d02:	f04f 0c0a 	mov.w	ip, #10
 8003d06:	4619      	mov	r1, r3
 8003d08:	3401      	adds	r4, #1
 8003d0a:	9305      	str	r3, [sp, #20]
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d12:	3a30      	subs	r2, #48	@ 0x30
 8003d14:	2a09      	cmp	r2, #9
 8003d16:	d903      	bls.n	8003d20 <_vfiprintf_r+0x1cc>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0c6      	beq.n	8003caa <_vfiprintf_r+0x156>
 8003d1c:	9105      	str	r1, [sp, #20]
 8003d1e:	e7c4      	b.n	8003caa <_vfiprintf_r+0x156>
 8003d20:	4604      	mov	r4, r0
 8003d22:	2301      	movs	r3, #1
 8003d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d28:	e7f0      	b.n	8003d0c <_vfiprintf_r+0x1b8>
 8003d2a:	ab03      	add	r3, sp, #12
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	462a      	mov	r2, r5
 8003d30:	4630      	mov	r0, r6
 8003d32:	4b13      	ldr	r3, [pc, #76]	@ (8003d80 <_vfiprintf_r+0x22c>)
 8003d34:	a904      	add	r1, sp, #16
 8003d36:	f3af 8000 	nop.w
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	1c78      	adds	r0, r7, #1
 8003d3e:	d1d6      	bne.n	8003cee <_vfiprintf_r+0x19a>
 8003d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d42:	07d9      	lsls	r1, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <_vfiprintf_r+0x1fe>
 8003d46:	89ab      	ldrh	r3, [r5, #12]
 8003d48:	059a      	lsls	r2, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <_vfiprintf_r+0x1fe>
 8003d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d4e:	f7ff fc89 	bl	8003664 <__retarget_lock_release_recursive>
 8003d52:	89ab      	ldrh	r3, [r5, #12]
 8003d54:	065b      	lsls	r3, r3, #25
 8003d56:	f53f af1f 	bmi.w	8003b98 <_vfiprintf_r+0x44>
 8003d5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d5c:	e71e      	b.n	8003b9c <_vfiprintf_r+0x48>
 8003d5e:	ab03      	add	r3, sp, #12
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	462a      	mov	r2, r5
 8003d64:	4630      	mov	r0, r6
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <_vfiprintf_r+0x22c>)
 8003d68:	a904      	add	r1, sp, #16
 8003d6a:	f000 f87d 	bl	8003e68 <_printf_i>
 8003d6e:	e7e4      	b.n	8003d3a <_vfiprintf_r+0x1e6>
 8003d70:	0800447a 	.word	0x0800447a
 8003d74:	08004480 	.word	0x08004480
 8003d78:	08004484 	.word	0x08004484
 8003d7c:	00000000 	.word	0x00000000
 8003d80:	08003b2f 	.word	0x08003b2f

08003d84 <_printf_common>:
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	4616      	mov	r6, r2
 8003d8a:	4698      	mov	r8, r3
 8003d8c:	688a      	ldr	r2, [r1, #8]
 8003d8e:	690b      	ldr	r3, [r1, #16]
 8003d90:	4607      	mov	r7, r0
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bfb8      	it	lt
 8003d96:	4613      	movlt	r3, r2
 8003d98:	6033      	str	r3, [r6, #0]
 8003d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d9e:	460c      	mov	r4, r1
 8003da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003da4:	b10a      	cbz	r2, 8003daa <_printf_common+0x26>
 8003da6:	3301      	adds	r3, #1
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	0699      	lsls	r1, r3, #26
 8003dae:	bf42      	ittt	mi
 8003db0:	6833      	ldrmi	r3, [r6, #0]
 8003db2:	3302      	addmi	r3, #2
 8003db4:	6033      	strmi	r3, [r6, #0]
 8003db6:	6825      	ldr	r5, [r4, #0]
 8003db8:	f015 0506 	ands.w	r5, r5, #6
 8003dbc:	d106      	bne.n	8003dcc <_printf_common+0x48>
 8003dbe:	f104 0a19 	add.w	sl, r4, #25
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	6832      	ldr	r2, [r6, #0]
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	42ab      	cmp	r3, r5
 8003dca:	dc2b      	bgt.n	8003e24 <_printf_common+0xa0>
 8003dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003dd0:	6822      	ldr	r2, [r4, #0]
 8003dd2:	3b00      	subs	r3, #0
 8003dd4:	bf18      	it	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	0692      	lsls	r2, r2, #26
 8003dda:	d430      	bmi.n	8003e3e <_printf_common+0xba>
 8003ddc:	4641      	mov	r1, r8
 8003dde:	4638      	mov	r0, r7
 8003de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003de4:	47c8      	blx	r9
 8003de6:	3001      	adds	r0, #1
 8003de8:	d023      	beq.n	8003e32 <_printf_common+0xae>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	6922      	ldr	r2, [r4, #16]
 8003dee:	f003 0306 	and.w	r3, r3, #6
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf14      	ite	ne
 8003df6:	2500      	movne	r5, #0
 8003df8:	6833      	ldreq	r3, [r6, #0]
 8003dfa:	f04f 0600 	mov.w	r6, #0
 8003dfe:	bf08      	it	eq
 8003e00:	68e5      	ldreq	r5, [r4, #12]
 8003e02:	f104 041a 	add.w	r4, r4, #26
 8003e06:	bf08      	it	eq
 8003e08:	1aed      	subeq	r5, r5, r3
 8003e0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e0e:	bf08      	it	eq
 8003e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e14:	4293      	cmp	r3, r2
 8003e16:	bfc4      	itt	gt
 8003e18:	1a9b      	subgt	r3, r3, r2
 8003e1a:	18ed      	addgt	r5, r5, r3
 8003e1c:	42b5      	cmp	r5, r6
 8003e1e:	d11a      	bne.n	8003e56 <_printf_common+0xd2>
 8003e20:	2000      	movs	r0, #0
 8003e22:	e008      	b.n	8003e36 <_printf_common+0xb2>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4652      	mov	r2, sl
 8003e28:	4641      	mov	r1, r8
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	47c8      	blx	r9
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d103      	bne.n	8003e3a <_printf_common+0xb6>
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295
 8003e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3a:	3501      	adds	r5, #1
 8003e3c:	e7c1      	b.n	8003dc2 <_printf_common+0x3e>
 8003e3e:	2030      	movs	r0, #48	@ 0x30
 8003e40:	18e1      	adds	r1, r4, r3
 8003e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e4c:	4422      	add	r2, r4
 8003e4e:	3302      	adds	r3, #2
 8003e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e54:	e7c2      	b.n	8003ddc <_printf_common+0x58>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	47c8      	blx	r9
 8003e60:	3001      	adds	r0, #1
 8003e62:	d0e6      	beq.n	8003e32 <_printf_common+0xae>
 8003e64:	3601      	adds	r6, #1
 8003e66:	e7d9      	b.n	8003e1c <_printf_common+0x98>

08003e68 <_printf_i>:
 8003e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	7e0f      	ldrb	r7, [r1, #24]
 8003e6e:	4691      	mov	r9, r2
 8003e70:	2f78      	cmp	r7, #120	@ 0x78
 8003e72:	4680      	mov	r8, r0
 8003e74:	460c      	mov	r4, r1
 8003e76:	469a      	mov	sl, r3
 8003e78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e7e:	d807      	bhi.n	8003e90 <_printf_i+0x28>
 8003e80:	2f62      	cmp	r7, #98	@ 0x62
 8003e82:	d80a      	bhi.n	8003e9a <_printf_i+0x32>
 8003e84:	2f00      	cmp	r7, #0
 8003e86:	f000 80d3 	beq.w	8004030 <_printf_i+0x1c8>
 8003e8a:	2f58      	cmp	r7, #88	@ 0x58
 8003e8c:	f000 80ba 	beq.w	8004004 <_printf_i+0x19c>
 8003e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e98:	e03a      	b.n	8003f10 <_printf_i+0xa8>
 8003e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e9e:	2b15      	cmp	r3, #21
 8003ea0:	d8f6      	bhi.n	8003e90 <_printf_i+0x28>
 8003ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ea8 <_printf_i+0x40>)
 8003ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ea8:	08003f01 	.word	0x08003f01
 8003eac:	08003f15 	.word	0x08003f15
 8003eb0:	08003e91 	.word	0x08003e91
 8003eb4:	08003e91 	.word	0x08003e91
 8003eb8:	08003e91 	.word	0x08003e91
 8003ebc:	08003e91 	.word	0x08003e91
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003e91 	.word	0x08003e91
 8003ec8:	08003e91 	.word	0x08003e91
 8003ecc:	08003e91 	.word	0x08003e91
 8003ed0:	08003e91 	.word	0x08003e91
 8003ed4:	08004017 	.word	0x08004017
 8003ed8:	08003f3f 	.word	0x08003f3f
 8003edc:	08003fd1 	.word	0x08003fd1
 8003ee0:	08003e91 	.word	0x08003e91
 8003ee4:	08003e91 	.word	0x08003e91
 8003ee8:	08004039 	.word	0x08004039
 8003eec:	08003e91 	.word	0x08003e91
 8003ef0:	08003f3f 	.word	0x08003f3f
 8003ef4:	08003e91 	.word	0x08003e91
 8003ef8:	08003e91 	.word	0x08003e91
 8003efc:	08003fd9 	.word	0x08003fd9
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	1d1a      	adds	r2, r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6032      	str	r2, [r6, #0]
 8003f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f10:	2301      	movs	r3, #1
 8003f12:	e09e      	b.n	8004052 <_printf_i+0x1ea>
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	6031      	str	r1, [r6, #0]
 8003f1c:	0606      	lsls	r6, r0, #24
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0xbc>
 8003f20:	681d      	ldr	r5, [r3, #0]
 8003f22:	e003      	b.n	8003f2c <_printf_i+0xc4>
 8003f24:	0645      	lsls	r5, r0, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0xb8>
 8003f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xd0>
 8003f30:	232d      	movs	r3, #45	@ 0x2d
 8003f32:	426d      	negs	r5, r5
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f38:	230a      	movs	r3, #10
 8003f3a:	4859      	ldr	r0, [pc, #356]	@ (80040a0 <_printf_i+0x238>)
 8003f3c:	e011      	b.n	8003f62 <_printf_i+0xfa>
 8003f3e:	6821      	ldr	r1, [r4, #0]
 8003f40:	6833      	ldr	r3, [r6, #0]
 8003f42:	0608      	lsls	r0, r1, #24
 8003f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f48:	d402      	bmi.n	8003f50 <_printf_i+0xe8>
 8003f4a:	0649      	lsls	r1, r1, #25
 8003f4c:	bf48      	it	mi
 8003f4e:	b2ad      	uxthmi	r5, r5
 8003f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	bf14      	ite	ne
 8003f56:	230a      	movne	r3, #10
 8003f58:	2308      	moveq	r3, #8
 8003f5a:	4851      	ldr	r0, [pc, #324]	@ (80040a0 <_printf_i+0x238>)
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f62:	6866      	ldr	r6, [r4, #4]
 8003f64:	2e00      	cmp	r6, #0
 8003f66:	bfa8      	it	ge
 8003f68:	6821      	ldrge	r1, [r4, #0]
 8003f6a:	60a6      	str	r6, [r4, #8]
 8003f6c:	bfa4      	itt	ge
 8003f6e:	f021 0104 	bicge.w	r1, r1, #4
 8003f72:	6021      	strge	r1, [r4, #0]
 8003f74:	b90d      	cbnz	r5, 8003f7a <_printf_i+0x112>
 8003f76:	2e00      	cmp	r6, #0
 8003f78:	d04b      	beq.n	8004012 <_printf_i+0x1aa>
 8003f7a:	4616      	mov	r6, r2
 8003f7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f80:	fb03 5711 	mls	r7, r3, r1, r5
 8003f84:	5dc7      	ldrb	r7, [r0, r7]
 8003f86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f8a:	462f      	mov	r7, r5
 8003f8c:	42bb      	cmp	r3, r7
 8003f8e:	460d      	mov	r5, r1
 8003f90:	d9f4      	bls.n	8003f7c <_printf_i+0x114>
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d10b      	bne.n	8003fae <_printf_i+0x146>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	07df      	lsls	r7, r3, #31
 8003f9a:	d508      	bpl.n	8003fae <_printf_i+0x146>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	6861      	ldr	r1, [r4, #4]
 8003fa0:	4299      	cmp	r1, r3
 8003fa2:	bfde      	ittt	le
 8003fa4:	2330      	movle	r3, #48	@ 0x30
 8003fa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003faa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fae:	1b92      	subs	r2, r2, r6
 8003fb0:	6122      	str	r2, [r4, #16]
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	f8cd a000 	str.w	sl, [sp]
 8003fbc:	aa03      	add	r2, sp, #12
 8003fbe:	f7ff fee1 	bl	8003d84 <_printf_common>
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d14a      	bne.n	800405c <_printf_i+0x1f4>
 8003fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fca:	b004      	add	sp, #16
 8003fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	2778      	movs	r7, #120	@ 0x78
 8003fda:	4832      	ldr	r0, [pc, #200]	@ (80040a4 <_printf_i+0x23c>)
 8003fdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	6831      	ldr	r1, [r6, #0]
 8003fe4:	061f      	lsls	r7, r3, #24
 8003fe6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fea:	d402      	bmi.n	8003ff2 <_printf_i+0x18a>
 8003fec:	065f      	lsls	r7, r3, #25
 8003fee:	bf48      	it	mi
 8003ff0:	b2ad      	uxthmi	r5, r5
 8003ff2:	6031      	str	r1, [r6, #0]
 8003ff4:	07d9      	lsls	r1, r3, #31
 8003ff6:	bf44      	itt	mi
 8003ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffc:	6023      	strmi	r3, [r4, #0]
 8003ffe:	b11d      	cbz	r5, 8004008 <_printf_i+0x1a0>
 8004000:	2310      	movs	r3, #16
 8004002:	e7ab      	b.n	8003f5c <_printf_i+0xf4>
 8004004:	4826      	ldr	r0, [pc, #152]	@ (80040a0 <_printf_i+0x238>)
 8004006:	e7e9      	b.n	8003fdc <_printf_i+0x174>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	f023 0320 	bic.w	r3, r3, #32
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	e7f6      	b.n	8004000 <_printf_i+0x198>
 8004012:	4616      	mov	r6, r2
 8004014:	e7bd      	b.n	8003f92 <_printf_i+0x12a>
 8004016:	6833      	ldr	r3, [r6, #0]
 8004018:	6825      	ldr	r5, [r4, #0]
 800401a:	1d18      	adds	r0, r3, #4
 800401c:	6961      	ldr	r1, [r4, #20]
 800401e:	6030      	str	r0, [r6, #0]
 8004020:	062e      	lsls	r6, r5, #24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	d501      	bpl.n	800402a <_printf_i+0x1c2>
 8004026:	6019      	str	r1, [r3, #0]
 8004028:	e002      	b.n	8004030 <_printf_i+0x1c8>
 800402a:	0668      	lsls	r0, r5, #25
 800402c:	d5fb      	bpl.n	8004026 <_printf_i+0x1be>
 800402e:	8019      	strh	r1, [r3, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	4616      	mov	r6, r2
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	e7bc      	b.n	8003fb2 <_printf_i+0x14a>
 8004038:	6833      	ldr	r3, [r6, #0]
 800403a:	2100      	movs	r1, #0
 800403c:	1d1a      	adds	r2, r3, #4
 800403e:	6032      	str	r2, [r6, #0]
 8004040:	681e      	ldr	r6, [r3, #0]
 8004042:	6862      	ldr	r2, [r4, #4]
 8004044:	4630      	mov	r0, r6
 8004046:	f000 f8ed 	bl	8004224 <memchr>
 800404a:	b108      	cbz	r0, 8004050 <_printf_i+0x1e8>
 800404c:	1b80      	subs	r0, r0, r6
 800404e:	6060      	str	r0, [r4, #4]
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	6123      	str	r3, [r4, #16]
 8004054:	2300      	movs	r3, #0
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800405a:	e7aa      	b.n	8003fb2 <_printf_i+0x14a>
 800405c:	4632      	mov	r2, r6
 800405e:	4649      	mov	r1, r9
 8004060:	4640      	mov	r0, r8
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	47d0      	blx	sl
 8004066:	3001      	adds	r0, #1
 8004068:	d0ad      	beq.n	8003fc6 <_printf_i+0x15e>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	079b      	lsls	r3, r3, #30
 800406e:	d413      	bmi.n	8004098 <_printf_i+0x230>
 8004070:	68e0      	ldr	r0, [r4, #12]
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	4298      	cmp	r0, r3
 8004076:	bfb8      	it	lt
 8004078:	4618      	movlt	r0, r3
 800407a:	e7a6      	b.n	8003fca <_printf_i+0x162>
 800407c:	2301      	movs	r3, #1
 800407e:	4632      	mov	r2, r6
 8004080:	4649      	mov	r1, r9
 8004082:	4640      	mov	r0, r8
 8004084:	47d0      	blx	sl
 8004086:	3001      	adds	r0, #1
 8004088:	d09d      	beq.n	8003fc6 <_printf_i+0x15e>
 800408a:	3501      	adds	r5, #1
 800408c:	68e3      	ldr	r3, [r4, #12]
 800408e:	9903      	ldr	r1, [sp, #12]
 8004090:	1a5b      	subs	r3, r3, r1
 8004092:	42ab      	cmp	r3, r5
 8004094:	dcf2      	bgt.n	800407c <_printf_i+0x214>
 8004096:	e7eb      	b.n	8004070 <_printf_i+0x208>
 8004098:	2500      	movs	r5, #0
 800409a:	f104 0619 	add.w	r6, r4, #25
 800409e:	e7f5      	b.n	800408c <_printf_i+0x224>
 80040a0:	0800448b 	.word	0x0800448b
 80040a4:	0800449c 	.word	0x0800449c

080040a8 <__swbuf_r>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	460e      	mov	r6, r1
 80040ac:	4614      	mov	r4, r2
 80040ae:	4605      	mov	r5, r0
 80040b0:	b118      	cbz	r0, 80040ba <__swbuf_r+0x12>
 80040b2:	6a03      	ldr	r3, [r0, #32]
 80040b4:	b90b      	cbnz	r3, 80040ba <__swbuf_r+0x12>
 80040b6:	f7ff f99b 	bl	80033f0 <__sinit>
 80040ba:	69a3      	ldr	r3, [r4, #24]
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	071a      	lsls	r2, r3, #28
 80040c2:	d501      	bpl.n	80040c8 <__swbuf_r+0x20>
 80040c4:	6923      	ldr	r3, [r4, #16]
 80040c6:	b943      	cbnz	r3, 80040da <__swbuf_r+0x32>
 80040c8:	4621      	mov	r1, r4
 80040ca:	4628      	mov	r0, r5
 80040cc:	f000 f82a 	bl	8004124 <__swsetup_r>
 80040d0:	b118      	cbz	r0, 80040da <__swbuf_r+0x32>
 80040d2:	f04f 37ff 	mov.w	r7, #4294967295
 80040d6:	4638      	mov	r0, r7
 80040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	6922      	ldr	r2, [r4, #16]
 80040de:	b2f6      	uxtb	r6, r6
 80040e0:	1a98      	subs	r0, r3, r2
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	4637      	mov	r7, r6
 80040e6:	4283      	cmp	r3, r0
 80040e8:	dc05      	bgt.n	80040f6 <__swbuf_r+0x4e>
 80040ea:	4621      	mov	r1, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7ff f8b7 	bl	8003260 <_fflush_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d1ed      	bne.n	80040d2 <__swbuf_r+0x2a>
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	701e      	strb	r6, [r3, #0]
 8004104:	6962      	ldr	r2, [r4, #20]
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	429a      	cmp	r2, r3
 800410a:	d004      	beq.n	8004116 <__swbuf_r+0x6e>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	07db      	lsls	r3, r3, #31
 8004110:	d5e1      	bpl.n	80040d6 <__swbuf_r+0x2e>
 8004112:	2e0a      	cmp	r6, #10
 8004114:	d1df      	bne.n	80040d6 <__swbuf_r+0x2e>
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f7ff f8a1 	bl	8003260 <_fflush_r>
 800411e:	2800      	cmp	r0, #0
 8004120:	d0d9      	beq.n	80040d6 <__swbuf_r+0x2e>
 8004122:	e7d6      	b.n	80040d2 <__swbuf_r+0x2a>

08004124 <__swsetup_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <__swsetup_r+0xa8>)
 8004128:	4605      	mov	r5, r0
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	460c      	mov	r4, r1
 800412e:	b118      	cbz	r0, 8004138 <__swsetup_r+0x14>
 8004130:	6a03      	ldr	r3, [r0, #32]
 8004132:	b90b      	cbnz	r3, 8004138 <__swsetup_r+0x14>
 8004134:	f7ff f95c 	bl	80033f0 <__sinit>
 8004138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800413c:	0719      	lsls	r1, r3, #28
 800413e:	d422      	bmi.n	8004186 <__swsetup_r+0x62>
 8004140:	06da      	lsls	r2, r3, #27
 8004142:	d407      	bmi.n	8004154 <__swsetup_r+0x30>
 8004144:	2209      	movs	r2, #9
 8004146:	602a      	str	r2, [r5, #0]
 8004148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	81a3      	strh	r3, [r4, #12]
 8004152:	e033      	b.n	80041bc <__swsetup_r+0x98>
 8004154:	0758      	lsls	r0, r3, #29
 8004156:	d512      	bpl.n	800417e <__swsetup_r+0x5a>
 8004158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800415a:	b141      	cbz	r1, 800416e <__swsetup_r+0x4a>
 800415c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004160:	4299      	cmp	r1, r3
 8004162:	d002      	beq.n	800416a <__swsetup_r+0x46>
 8004164:	4628      	mov	r0, r5
 8004166:	f7ff fa7f 	bl	8003668 <_free_r>
 800416a:	2300      	movs	r3, #0
 800416c:	6363      	str	r3, [r4, #52]	@ 0x34
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004174:	81a3      	strh	r3, [r4, #12]
 8004176:	2300      	movs	r3, #0
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	f043 0308 	orr.w	r3, r3, #8
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	b94b      	cbnz	r3, 800419e <__swsetup_r+0x7a>
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004194:	d003      	beq.n	800419e <__swsetup_r+0x7a>
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f8b2 	bl	8004302 <__smakebuf_r>
 800419e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a2:	f013 0201 	ands.w	r2, r3, #1
 80041a6:	d00a      	beq.n	80041be <__swsetup_r+0x9a>
 80041a8:	2200      	movs	r2, #0
 80041aa:	60a2      	str	r2, [r4, #8]
 80041ac:	6962      	ldr	r2, [r4, #20]
 80041ae:	4252      	negs	r2, r2
 80041b0:	61a2      	str	r2, [r4, #24]
 80041b2:	6922      	ldr	r2, [r4, #16]
 80041b4:	b942      	cbnz	r2, 80041c8 <__swsetup_r+0xa4>
 80041b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80041ba:	d1c5      	bne.n	8004148 <__swsetup_r+0x24>
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
 80041be:	0799      	lsls	r1, r3, #30
 80041c0:	bf58      	it	pl
 80041c2:	6962      	ldrpl	r2, [r4, #20]
 80041c4:	60a2      	str	r2, [r4, #8]
 80041c6:	e7f4      	b.n	80041b2 <__swsetup_r+0x8e>
 80041c8:	2000      	movs	r0, #0
 80041ca:	e7f7      	b.n	80041bc <__swsetup_r+0x98>
 80041cc:	20000020 	.word	0x20000020

080041d0 <memmove>:
 80041d0:	4288      	cmp	r0, r1
 80041d2:	b510      	push	{r4, lr}
 80041d4:	eb01 0402 	add.w	r4, r1, r2
 80041d8:	d902      	bls.n	80041e0 <memmove+0x10>
 80041da:	4284      	cmp	r4, r0
 80041dc:	4623      	mov	r3, r4
 80041de:	d807      	bhi.n	80041f0 <memmove+0x20>
 80041e0:	1e43      	subs	r3, r0, #1
 80041e2:	42a1      	cmp	r1, r4
 80041e4:	d008      	beq.n	80041f8 <memmove+0x28>
 80041e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ee:	e7f8      	b.n	80041e2 <memmove+0x12>
 80041f0:	4601      	mov	r1, r0
 80041f2:	4402      	add	r2, r0
 80041f4:	428a      	cmp	r2, r1
 80041f6:	d100      	bne.n	80041fa <memmove+0x2a>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004202:	e7f7      	b.n	80041f4 <memmove+0x24>

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	2300      	movs	r3, #0
 8004208:	4d05      	ldr	r5, [pc, #20]	@ (8004220 <_sbrk_r+0x1c>)
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc f992 	bl	8000538 <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	2000032c 	.word	0x2000032c

08004224 <memchr>:
 8004224:	4603      	mov	r3, r0
 8004226:	b510      	push	{r4, lr}
 8004228:	b2c9      	uxtb	r1, r1
 800422a:	4402      	add	r2, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	4618      	mov	r0, r3
 8004230:	d101      	bne.n	8004236 <memchr+0x12>
 8004232:	2000      	movs	r0, #0
 8004234:	e003      	b.n	800423e <memchr+0x1a>
 8004236:	7804      	ldrb	r4, [r0, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	428c      	cmp	r4, r1
 800423c:	d1f6      	bne.n	800422c <memchr+0x8>
 800423e:	bd10      	pop	{r4, pc}

08004240 <memcpy>:
 8004240:	440a      	add	r2, r1
 8004242:	4291      	cmp	r1, r2
 8004244:	f100 33ff 	add.w	r3, r0, #4294967295
 8004248:	d100      	bne.n	800424c <memcpy+0xc>
 800424a:	4770      	bx	lr
 800424c:	b510      	push	{r4, lr}
 800424e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004252:	4291      	cmp	r1, r2
 8004254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004258:	d1f9      	bne.n	800424e <memcpy+0xe>
 800425a:	bd10      	pop	{r4, pc}

0800425c <_realloc_r>:
 800425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004260:	4680      	mov	r8, r0
 8004262:	4615      	mov	r5, r2
 8004264:	460c      	mov	r4, r1
 8004266:	b921      	cbnz	r1, 8004272 <_realloc_r+0x16>
 8004268:	4611      	mov	r1, r2
 800426a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800426e:	f7ff ba65 	b.w	800373c <_malloc_r>
 8004272:	b92a      	cbnz	r2, 8004280 <_realloc_r+0x24>
 8004274:	f7ff f9f8 	bl	8003668 <_free_r>
 8004278:	2400      	movs	r4, #0
 800427a:	4620      	mov	r0, r4
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	f000 f89e 	bl	80043c0 <_malloc_usable_size_r>
 8004284:	4285      	cmp	r5, r0
 8004286:	4606      	mov	r6, r0
 8004288:	d802      	bhi.n	8004290 <_realloc_r+0x34>
 800428a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800428e:	d8f4      	bhi.n	800427a <_realloc_r+0x1e>
 8004290:	4629      	mov	r1, r5
 8004292:	4640      	mov	r0, r8
 8004294:	f7ff fa52 	bl	800373c <_malloc_r>
 8004298:	4607      	mov	r7, r0
 800429a:	2800      	cmp	r0, #0
 800429c:	d0ec      	beq.n	8004278 <_realloc_r+0x1c>
 800429e:	42b5      	cmp	r5, r6
 80042a0:	462a      	mov	r2, r5
 80042a2:	4621      	mov	r1, r4
 80042a4:	bf28      	it	cs
 80042a6:	4632      	movcs	r2, r6
 80042a8:	f7ff ffca 	bl	8004240 <memcpy>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff f9da 	bl	8003668 <_free_r>
 80042b4:	463c      	mov	r4, r7
 80042b6:	e7e0      	b.n	800427a <_realloc_r+0x1e>

080042b8 <__swhatbuf_r>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	4615      	mov	r5, r2
 80042c2:	2900      	cmp	r1, #0
 80042c4:	461e      	mov	r6, r3
 80042c6:	b096      	sub	sp, #88	@ 0x58
 80042c8:	da0c      	bge.n	80042e4 <__swhatbuf_r+0x2c>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	2100      	movs	r1, #0
 80042ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042d2:	bf14      	ite	ne
 80042d4:	2340      	movne	r3, #64	@ 0x40
 80042d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80042da:	2000      	movs	r0, #0
 80042dc:	6031      	str	r1, [r6, #0]
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	b016      	add	sp, #88	@ 0x58
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	466a      	mov	r2, sp
 80042e6:	f000 f849 	bl	800437c <_fstat_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	dbed      	blt.n	80042ca <__swhatbuf_r+0x12>
 80042ee:	9901      	ldr	r1, [sp, #4]
 80042f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042f8:	4259      	negs	r1, r3
 80042fa:	4159      	adcs	r1, r3
 80042fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004300:	e7eb      	b.n	80042da <__swhatbuf_r+0x22>

08004302 <__smakebuf_r>:
 8004302:	898b      	ldrh	r3, [r1, #12]
 8004304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004306:	079d      	lsls	r5, r3, #30
 8004308:	4606      	mov	r6, r0
 800430a:	460c      	mov	r4, r1
 800430c:	d507      	bpl.n	800431e <__smakebuf_r+0x1c>
 800430e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	6123      	str	r3, [r4, #16]
 8004316:	2301      	movs	r3, #1
 8004318:	6163      	str	r3, [r4, #20]
 800431a:	b003      	add	sp, #12
 800431c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800431e:	466a      	mov	r2, sp
 8004320:	ab01      	add	r3, sp, #4
 8004322:	f7ff ffc9 	bl	80042b8 <__swhatbuf_r>
 8004326:	9f00      	ldr	r7, [sp, #0]
 8004328:	4605      	mov	r5, r0
 800432a:	4639      	mov	r1, r7
 800432c:	4630      	mov	r0, r6
 800432e:	f7ff fa05 	bl	800373c <_malloc_r>
 8004332:	b948      	cbnz	r0, 8004348 <__smakebuf_r+0x46>
 8004334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004338:	059a      	lsls	r2, r3, #22
 800433a:	d4ee      	bmi.n	800431a <__smakebuf_r+0x18>
 800433c:	f023 0303 	bic.w	r3, r3, #3
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	e7e2      	b.n	800430e <__smakebuf_r+0xc>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800434e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	6020      	str	r0, [r4, #0]
 8004358:	b15b      	cbz	r3, 8004372 <__smakebuf_r+0x70>
 800435a:	4630      	mov	r0, r6
 800435c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004360:	f000 f81e 	bl	80043a0 <_isatty_r>
 8004364:	b128      	cbz	r0, 8004372 <__smakebuf_r+0x70>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	431d      	orrs	r5, r3
 8004376:	81a5      	strh	r5, [r4, #12]
 8004378:	e7cf      	b.n	800431a <__smakebuf_r+0x18>
	...

0800437c <_fstat_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	2300      	movs	r3, #0
 8004380:	4d06      	ldr	r5, [pc, #24]	@ (800439c <_fstat_r+0x20>)
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	f7fe fd68 	bl	8002e5e <_fstat>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d102      	bne.n	8004398 <_fstat_r+0x1c>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	b103      	cbz	r3, 8004398 <_fstat_r+0x1c>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	2000032c 	.word	0x2000032c

080043a0 <_isatty_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	2300      	movs	r3, #0
 80043a4:	4d05      	ldr	r5, [pc, #20]	@ (80043bc <_isatty_r+0x1c>)
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	f7fe feba 	bl	8003124 <_isatty>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_isatty_r+0x1a>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_isatty_r+0x1a>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	2000032c 	.word	0x2000032c

080043c0 <_malloc_usable_size_r>:
 80043c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c4:	1f18      	subs	r0, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfbc      	itt	lt
 80043ca:	580b      	ldrlt	r3, [r1, r0]
 80043cc:	18c0      	addlt	r0, r0, r3
 80043ce:	4770      	bx	lr

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
